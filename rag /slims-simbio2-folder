slims\simbio2 files and folders


================================================================================
File: simbio.inc.php
================================================================================

<?php
/**
 * simbio class
 * Simbio Main Abstract class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

abstract class simbio
{
    public $error = '';
    private $version = '2.0';

    /**
     * Method to show an error
     *
     * @param   boolean $bool_die
     * @return  void
     */
    public function showError($bool_die = false)
    {
        echo '<div style="padding: 5px; border: 1px dotted #FF0000; color: #FF0000;">';
        echo 'ERROR : '.nl2br($this->error).'</div>'."\n";
        if ($bool_die) {
            die();
        }
    }


    /**
     * Static method to colorized SQL string
     *
     * @param   string  $sql_string
     * @return  string
     */
    public static function colorSQLstring($sql_string = '')
    {
        // list of mysql reserved words
        $reservedwords = array(
            "\bDATABASE\b",
            "\bTABLE\b",
            "\bAND\b",
            "\bOR\b",
            "\bSELECT\b",
            "\bINSERT\b",
            "\bUPDATE\b",
            "\bDELETE\b",
            "\bALTER\b",
            "\bFROM\b",
            "\bWHERE\b",
            "\bLIKE\b",
            "\bORDER BY\b",
            "\bLIMIT\b",
            "\bUSE\b",
            "\bDESCRIBE\b",
            "\bJOIN\b",
            "\bLEFT\b",
            "\bRIGHT\b",
            "\bINNER\b",
            "\b=\b",
            "\b!=\b",
            "\bON\b",
            "\bIN\b",
            "\bAS\b",
            "\bNULL\b",
            "\bNOT\b",
            "\bIS\b",
            "\bINTO\b");

        // colorized the sql string
        $matches_str = array();
        preg_match_all("/'[^']*'/i", $sql_string, $matches_str, PREG_SET_ORDER);
        if ($matches_str) {
            foreach ($matches_str as $sql_str) {
                $sql_string = preg_replace("/".$sql_str[0]."/i", '<strong style="color: green;">'.$sql_str[0].'</strong>', $sql_string);
            }
        }

        // colorized brackets
        $sql_string = str_replace(array('(',')'), array('<strong style="color: red;">(</b>', '<b style="color: red;">)</strong>'), $sql_string);

        // colorized the SQL reserved words
        foreach ($reservedwords as $words) {
            $sql_string = preg_replace("/$words/i", '<strong style="color: navy;">'.$words.'</strong>', $sql_string);
        }

        // remove regex special chars
        $sql_string = str_replace(array('\b'), '', $sql_string);
        return $sql_string;
    }
}
?>

================================================================================
File: simbio_DB\simbio_dbop.inc.php
================================================================================

<?php
/**
 * simbio_dbop class
 * SQL insert, update and delete operation wrapper class
 *
 * Copyright (C) 2007  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_dbop extends simbio
{
    private $obj_db = false;
    private $sql_string = '';
    public $insert_id = 0;
    public $affected_rows = 0;
    public $error = '';

    /**
     * A Class Constructor
     * Provide an argument with mysqli or simbio_mysql RDBMS connection object
     *
     * @param   object  $obj_db
     */
    public function __construct($obj_db)
    {
        $this->obj_db = $obj_db;
    }


    /**
     * Method to insert a record
     *
     * @param   string  $str_table
     * @param   array   $array_data
     * @return  boolean
     */
    public function insert($str_table, $array_data)
    {
        if (!is_array($array_data) OR count($array_data) == 0) {
            return false;
        }

        // parse the array first
        $_str_columns = '';
        $_str_value = '';
        foreach ($array_data as $column => $value) {
            // concatenating column name
            $_str_columns .= ", `$column`";
            // concatenating value
            if ($value === 'NULL' OR $value === null) {
                // if the value is NULL or string NULL
                $_str_value .= ', NULL';
            } else if (is_string($value)) {
                if (preg_match("/^literal{.+}/i", $value)) {
                    $value = preg_replace("/literal{|}/i", '', $value);
                    $_str_value .= ", $value";
                } else {
                    // concatenating column value
                    $_str_value .= ", '$value'";
                }
            } else {
                // if the value is an integer or unknown data type
                $_str_value .= ", $value";
            }
        }

        // strip the first comma  of string
        $_str_columns = substr_replace($_str_columns, '', 0, 1);
        $_str_value = substr_replace($_str_value, '', 0, 1);

        try {
            // the insert query
            $this->sql_string = "INSERT INTO `$str_table` ($_str_columns) "
                ."VALUES ($_str_value)";
            $_insert = $this->obj_db->query($this->sql_string);
            
            // get last inserted record ID
            $this->insert_id = $this->obj_db->insert_id;
            $this->affected_rows = $this->obj_db->affected_rows;
        } catch (Exception $e) {
            // if an error occur
            $this->error = isDev() ? $e->getMessage() . ' : ' . $this->sql_string : ''; 
            return false; 
        }

        return true;
    }


    /**
     * Method to update table records based on $str_criteria
     *
     * @param   string  $str_table
     * @param   array   $array_update
     * @param   string  $str_criteria
     * @return  boolean
     */
    public function update($str_table, $array_update, $str_criteria)
    {
        // check if the first argumen is an array
        if (!is_array($array_update)) {
            return false;
        } else {
            $_set = '';
            // concat the update query string
            foreach ($array_update as $column => $new_value) {
                if ($new_value == '') {
                    $_set .= ", `$column` = ''";
                } else if ($new_value === 'NULL' OR $new_value == null) {
                    $_set .= ", `$column` = NULL";
                } else if (is_string($new_value)) {
                    if (preg_match("/^literal{.+}/i", $new_value)) {
                        $new_value = preg_replace("/literal{|}/i", '', $new_value);
                        $_set .= ", `$column` = $new_value";
                    } else {
                        $_set .= ", `$column` = '$new_value'";
                    }
                } else {
                    $_set .= ", `$column` = $new_value";
                }
            }

            // strip the first comma
            $_set = substr_replace($_set, '', 0, 1);
        }

        // update query
        try {
            $this->sql_string = "UPDATE $str_table SET $_set WHERE $str_criteria";
            $_update = $this->obj_db->query($this->sql_string);
            // number of affected rows
            $this->affected_rows = $this->obj_db->affected_rows;
        } catch (Exception $e) {
             // if an error occur
             $this->error = isDev() ? $e->getMessage() . ' : ' . $this->sql_string : ''; 
             return false; 
        }

        return true;
    }


    /**
     * Method to delete records based on $str_criteria
     *
     * @param   string  $str_table
     * @param   string  $str_criteria
     * @return  boolean
     */
    public function delete($str_table, $str_criteria)
    {
        try {
            // the delete query
            $this->sql_string = "DELETE FROM $str_table WHERE $str_criteria";
            $_delete = $this->obj_db->query($this->sql_string);
            // affected rows
            $this->affected_rows = $this->obj_db->affected_rows;
        } catch (Exception $e) {
            // if an error occur
            $this->error = isDev() ? $e->getMessage() . ' : ' . $this->sql_string : ''; 
            return false; 
        }

        return true;
    }

    /**
     * Method to get last sql string
     *
     * @return string
     */
    public function getSQL() {
        return $this->sql_string;
    }

}


================================================================================
File: simbio_DB\datagrid\simbio_dbgrid.inc.php
================================================================================

<?php
/**
 * simbio_datagrid class
 * SQL datagrid creator
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

class simbio_datagrid extends simbio_table
{
    /**
     * Private properties
     */
    private $grid_real_q = false;

    /**
     * Protected properties
     */
    protected $grid_result_fields = array();
    protected $grid_result_rows = array();
    protected $sql_table = '';
    protected $sql_column = '';
    protected $sql_criteria = '';
    protected $sql_order = '';
    protected $primary_keys = array();
    protected $no_sort_column = array();
    protected $modified_content = array();
    protected $editable = false;

    /**
     * Public properties
     */
    public $debug = false;
    public $num_rows = 0;
    public $chbox_form_URL = '';
    public $alt_row_color = '#FFFFFF';
    public $alt_row_color_2 = '#CCCCCC';
    public $edit_link_text = '';
    public $table_name = 'datagrid';
    public $column_width = array();
    public $sort_column = array();
    public $sql_group_by = '';
    public $select_flag = '';
    public $chbox_property;
    public $edit_property;
    public $chbox_action_button = false;
    public $enable_chbox_confirm = true;
    public $chbox_confirm_msg = '';
    public $current_page = 1;
    public $query_time = 1;
    public $icon_edit = '';
    public $delete_URL = '';
    # are we using AJAX or not
    public $using_AJAX = true;
    public $invisible_fields = array();
    public $disable_paging = false;

    /**
     * Method to create datagrid
     *
     * @param   object  $obj_db
     * @param   string  $str_db_table
     * @param   integer $int_num2show
     * @param   boolean $bool_editable
     * @return  string
     */
    public function createDataGrid($obj_db, $str_db_table = '', $int_num2show = 30, $bool_editable = false)
    {
        // Default checkbox properties
        if (!isset($this->chbox_property)) $this->chbox_property = array('itemID', __('DELETE'));
        if (!isset($this->edit_property)) $this->edit_property = array('itemID', __('EDIT'));


        // check database connection
        if (!$obj_db OR $obj_db->error) {
            $_error = '<div style="padding: 5px; margin: 3px; border: 1px dotted #FF0000; color: #FF0000;">';
            $_error .= 'ERROR : Cant create datagrid, database connection error!';
            $_error .= '</div>';
            return $_error;
        }

        // set editable flag
        $this->editable = $bool_editable;

        // set default confirm message
        if (empty($this->chbox_confirm_msg)) $this->chbox_confirm_msg = __('Are You Sure Want to DELETE Selected Data?');

        // enable or disable confirm message
        $this->enable_chbox_confirm = config('enable_chbox_confirm', $this->enable_chbox_confirm);

        $this->sql_table = $str_db_table;
        $this->highlight_row = true;
        // sanitize table ID
        $this->table_ID = strtolower(str_replace(array(' ', '-', ','), '', $this->table_ID));

        if (empty($this->sql_table)) {
            die('simbio_datagrid : Table not specified yet');
        }

        // get page number from http get var
        if (isset($_GET['page']) AND $_GET['page'] > 1) {
            $this->current_page = (integer) $_GET['page'];
        }

        // count the row offset
        if ($this->current_page <= 1) {
            $_offset = 0;
        } else {
            $_offset = ($this->current_page*$int_num2show) - $int_num2show;
        }

        // change the record sorting if there fld var in URL
        $_fld_sort = $this->table_ID.'fld';
        $_dir = 'ASC';
        $_next_dir = 'DESC';
        $_sort_dir_info = __('ascendingly');
        if (isset($_GET[$_fld_sort]) AND !empty($_GET[$_fld_sort])) {
            $orderBy = str_replace(["`"], '', utility::filterData($_fld_sort, 'get', true, true, true));
            $this->sql_order = 'ORDER BY `'.urldecode($orderBy).'` ';
            // record order direction
            if (isset($_GET['dir']) AND ($_dir = trim($_GET['dir']))) {
                if ($_dir == 'DESC') {
                    $_dir = 'DESC';
                    $_next_dir = 'ASC';
                } else {
                    $_dir = 'ASC';
                    $_next_dir = 'DESC';
                    $_sort_dir_info = __('descendingly');
                }
                // append sort direction
                $this->sql_order .= $_dir;
            }
        }

        // check group by
        if ($this->sql_group_by) {
            $this->sql_group_by = ' GROUP BY '.$this->sql_group_by;
        }

        // sql string
        $_sql_str = 'SELECT SQL_CALC_FOUND_ROWS '.$this->select_flag.' '.$this->sql_column.
            ' FROM '.$this->sql_table.' '.$this->sql_criteria.
            ' '.$this->sql_group_by.' '.$this->sql_order." LIMIT $int_num2show OFFSET $_offset";

        // for debugging purpose only
        debug($_sql_str);

        // real query
        $_start = function_exists('microtime')?microtime(true):time();
        $this->grid_real_q = $obj_db->query($_sql_str);
        $_end = function_exists('microtime')?microtime(true):time();
        $this->query_time = round($_end-$_start, 5);
        // if the query error
        if (ENVIRONMENT === 'development' AND (!$this->grid_real_q OR $obj_db->error)) {
            $_error = '<div style="padding: 5px; margin: 3px; border: 1px dotted #FF0000; color: #FF0000;">';
            $_error .= 'ERROR<br />';
            $_error .= 'MySQL Server said : '.$obj_db->error.'';
            if ($this->debug) {
                $_error .= '<br />With SQL Query : '.strip_tags($_sql_str).'';
            }
            $_error .= '</div>';
            return $_error;
        }
        // check if there any rows returned
        if ($this->grid_real_q->num_rows < 1) {
            return $this->printTable();
        }

        // fetch total number of data
        $_num_query = $obj_db->query('SELECT FOUND_ROWS()');
        $_data = $_num_query->fetch_row();
        $this->num_rows = $_data[0];

        // check the query string and rebuild with urlencoded value
        $_url_query_str = '';
        if (isset($_SERVER['QUERY_STRING']) AND !empty($_SERVER['QUERY_STRING'])) {
            parse_str($_SERVER['QUERY_STRING'], $arr_query_var);
            // rebuild query str without "fld" and "dir" var
            foreach ($arr_query_var as $varname => $varvalue) {
                if (!is_scalar($varvalue)) {
                    continue;
                }
                $varvalue = urlencode($varvalue);
                if ($varname != $this->table_ID.'fld' AND $varname != 'dir') {
                    $_url_query_str .= $varname.'='.$varvalue.'&';
                }
            }
        }

        // make all field name link for sorting
        $this->grid_result_fields = array();
        // adding record order links to field name header
        foreach ($this->grid_real_q->fetch_fields() as $_fld) {
            // check if the column is not listed in no_sort_column array properties
            if (!in_array($_fld->name, $this->no_sort_column) AND isset($this->sort_column[$_fld->name])) {
                $_order_by = $this->table_ID.'fld='.urlencode($this->sort_column[$_fld->name]).'&dir='.$_next_dir;
                $this->grid_result_fields[] = '<a href="'.$_SERVER['PHP_SELF'].'?'.$_url_query_str.$_order_by.'" title="'.__('Order list by').' '.$_fld->name.' '.$_sort_dir_info.'">'.$_fld->name.'</a>';
            } else {
                $this->grid_result_fields[] = $_fld->name;
            }
        }

        // table header and invisible fields shifting
        // if the table is editable
        if ($this->editable) {
            // invisible fields shifting value
            $_shift = 1;
            // chbox and edit property checking
            if ($this->chbox_property AND $this->edit_property) {
                $_edit_header_fields = array($this->chbox_property[1], $this->edit_property[1]);
                $_shift = 2;
            } else if ($this->chbox_property AND !$this->edit_property) {
                $_edit_header_fields = array($this->chbox_property[1]);
            } else {
                $_edit_header_fields = array($this->edit_property[1]);
            }
            // concat arrays
            unset($this->grid_result_fields[0]);
            $this->grid_result_fields = array_merge($_edit_header_fields, $this->grid_result_fields);
            // invisible field shifting
            if ($this->invisible_fields) {
                $_shifted_inv_fld = array();
                foreach ($this->invisible_fields as $_inv_fld) {
                    $_shifted_inv_fld[] = $_inv_fld+$_shift;
                }
                $this->invisible_fields = $_shifted_inv_fld;
            }
        }

        // field count
        $_field_cnt = count($this->grid_result_fields);

        $_row = 1;
        // records
        while ($_data = $this->grid_real_q->fetch_row()) {
            $this->grid_result_rows[$_row] = $_data;
            $_row_class = ($_row%2 == 0)?'alterCell':'alterCell2';

            // modified content
            foreach ($this->modified_content as $_field_num => $_new_content) {
                // change the value of modified column
                if (isset($this->grid_result_rows[$_row][$_field_num])) {
                    // run callback function php script if the string is embraced by "callback{*}"
                    if (preg_match('@^callback\{.+\}@i', $_new_content)) {
                        // strip the "callback{" and "}" string to empty string
                        $_callback_func = str_replace(array('callback{', '}'), '', $_new_content);
                        if (function_exists($_callback_func)) {
                            // call the function
                            $this->grid_result_rows[$_row][$_field_num] = $_callback_func($obj_db, $this->grid_result_rows[$_row], $_field_num);
                        } else { $this->grid_result_rows[$_row][$_field_num] = $_callback_func; }
                    } else {
                        // replace the "{column_value}" marker with real column value
                        $this->grid_result_rows[$_row][$_field_num] = str_replace('{column_value}', $this->grid_result_rows[$_row][$_field_num], trim($_new_content));
                    }
                }
            }

            // if the table is editable
            // make delete checkbox and edit button
            if ($this->editable) {
                // reset edit_fields array
                $_edit_fields = array();
                // check if checkbox array is included
                if ($this->chbox_property) {
                    $_del_chbox = '<input class="selected-row" type="checkbox" name="'.$this->chbox_property[0].'[]" value="'.$this->grid_result_rows[$_row][0].'" id="cbRow'.$_row.'" />';
                    $_edit_fields[] = $_del_chbox;
                }
                // check if edit link array is included
                if ($this->edit_property) {
                    $_edit_data = $this->edit_property[0].'='.$this->grid_result_rows[$_row][0].'&detail=true';
                    $_edit_link = '<a class="editLink'.( !$this->using_AJAX?' notAJAX':'' ).'" '
                        .'href="'.$_SERVER['PHP_SELF'].'?'.$_edit_data.'&'.$_url_query_str.'" postdata="'.$_edit_data.'" title="Edit">'.( $this->edit_link_text?$this->edit_link_text:'&nbsp;' ).'</a>';
                    $_edit_fields[] = $_edit_link;
                }
                // unset the first element (ID field)
                unset($this->grid_result_rows[$_row][0]);
                $this->grid_result_rows[$_row] = array_merge($_edit_fields, $this->grid_result_rows[$_row]);
            }

            // editable field style and column width modification
            for ($f = 0; $f < $_field_cnt; $f++) {
                if (($this->chbox_property AND $this->edit_property) AND ($f < 2) AND $this->editable) {
                    $this->setCellAttr($_row, $f, 'align="center" valign="top" style="width: 5%;"');
                } else {
                    // checking for special field width value set by column_width property array
                    $_attr = 'valign="top"';
                    if ($this->editable) {
                        if (($this->chbox_property AND $this->edit_property) AND isset($this->column_width[$f-2])) {
                            $_attr .= ' style="width: '.$this->column_width[$f-2].';"';
                        } else if ( (($this->chbox_property AND !$this->edit_property) OR (!$this->chbox_property AND $this->edit_property)) AND isset($this->column_width[$f-1])) {
                            $_attr .= ' style="width: '.$this->column_width[$f-1].';"';
                        }
                    } else {
                        if (isset($this->column_width[$f])) {
                            $_attr .= ' style="width: '.$this->column_width[$f].';"';
                        }
                    }
                    $this->setCellAttr($_row, $f, $_attr);
                }
            }
            $this->setCellAttr($_row, null, 'class="'.$_row_class.'"');

            $_row++;
        }

        // free resultset memory
        $this->grid_real_q->free_result();

        // return the formatted output
        return $this->makeOutput($int_num2show);
    }


    /**
     * Method to format an output of datagrid
     *
     * @param   integer $int_num2show
     * @return  string
     */
    protected function makeOutput($int_num2show = 30)
    {
        // remove invisible fields
        $this->removeInvisibleField();
        // get fields array and set the table header
        $this->setHeader($this->grid_result_fields);
        // data loop
        foreach ($this->grid_result_rows as $_data) {
            // append array to table
            $this->appendTableRow($_data);
        }

        // init buffer return var
        $_buffer = '';

        // create paging
        $_paging =  null;
        if ($this->num_rows > $int_num2show && !$this->disable_paging) {
            $_paging = simbio_paging::paging($this->num_rows, $int_num2show, 5);
        }
        // iframe
        $_iframe = '';
        // setting form target
        $_target = '_self';
        if ($this->using_AJAX) {
            $_target = 'submitExec';
            $_iframe = '<iframe name="submitExec" style="display: none; visibility: hidden; width: 100%; height: 0;"></iframe>'."\n";
            // below is for debugging purpose only
            // $_iframe = '<iframe name="submitExec" style="visibility: visible; width: 100%; height: 300px;"></iframe>'."\n";
        }
        // if editable
        if ($this->editable) {
            if (ENVIRONMENT === 'development') 
            {
                $_buffer .= '<small class="mx-1"># Debug</small>|<button id="enlargeBox" class="btn btn-link mx-1 p-0">' . __('Enlarge Debug Box') . '</button>';
                $_buffer .= '<iframe id="submitExec" name="submitExec" class="border border-secondary w-100" style="height: 50px;"></iframe>';
                $_buffer .= '<script>$(\'#enlargeBox\').click(function() {$(\'#submitExec\').attr(\'style\', \'height: 500px;\')})</script>';
            }
            if (class_exists('simbio_form_maker')) {
              $form_maker = new simbio_form_maker($this->table_name, $this->chbox_form_URL, $str_form_method = 'post', false);
              $form_maker->submit_target = $_target;
              $form_maker->add_form_attributes= 'class="form-inline"';
              $_buffer .= $form_maker->startForm();
            } else {
              $_buffer .= '<form action="'.$this->chbox_form_URL.'" name="'.$this->table_name.'" id="'.$this->table_name.'" target="'.$_target.'" method="post" class="form-inline">'."\n";
            }


            $_check_all = __('Check All');
            $_uncheck_all = __('Uncheck All');

            // action buttons group
            $_button_grp = '<table cellspacing="0" cellpadding="5" class="datagrid-action-bar" style="width: 100%;"><tr>';
            // if checkbox is include then show button
            if ($this->chbox_property) {
                $_button_grp .= '<td><input type="button" onclick="chboxFormSubmit(\''.$this->table_name.'\', \''.$this->chbox_confirm_msg.'\', '.((int)$this->enable_chbox_confirm).')" value="'.($this->chbox_action_button?$this->chbox_action_button:__('Delete Selected Data')).'" class="s-btn btn '.($this->chbox_action_button?'btn-success':'btn-danger').'" /> '
                    .'<input type="button" value="'.$_check_all.'" class="check-all button btn btn-default" /> '
                    .'<input type="button" value="'.$_uncheck_all.'" class="uncheck-all button btn btn-default" /> '
                    .'</td>';
            }

            // paging
            if ($_paging) {
                $_button_grp .= '<td class="paging-area">'.$_paging."\n".'</td>';
            }
            $_button_grp .= '</tr></table>'."\n";

            // table grid
            if (!isset($_SERVER['QUERY_STRING'])) {
                $_SERVER['QUERY_STRING'] = '';
            }
            $_buffer .= $_button_grp.$this->printTable().$_button_grp
                .'<input type="hidden" name="itemAction" value="true" />'
                .'<input type="hidden" name="lastQueryStr" value="'.$_SERVER['QUERY_STRING'].'" />'."\n"
                .'</form>'."\n";
            if (ENVIRONMENT !== 'development') $_buffer .= $_iframe;
        } else {
            // paging
            $_button_grp = '';
            if ($_paging) {
                $_button_grp .= '<table cellspacing="0" cellpadding="5" class="notprinted" style="background-color: #dcdcdc; width: 100%;">'
                    .'<tr><td>'.$_paging."\n".'</td></tr></table>';
            }

            $_buffer .= $_button_grp.$this->printTable().$_button_grp;
        }

        return $_buffer;
    }


    /**
     * Method to set datagrid fields
     *
     * @param   string  $sql_field
     * @return  void
     */
    public function setSQLColumn()
    {
        $_args_num = func_num_args();
        if ($_args_num < 1) {
            $this->sql_column = '*';
        } else if ($_args_num == 1) {
            $this->sql_column = func_get_arg(0);
        } else {
            // get all function arguments
            $columns = func_get_args();
            // iterate all arguments
            foreach ($columns as $_field) {
                $_column_alias = '';
                $_real_column = '';
                if (preg_match('/\sAS\s/i', $_field)) {
                    $_field_n_alias = explode(' AS ', $_field);
                    $_real_column = $_field_n_alias[0];
                    $_column_alias = str_replace("'", '', $_field_n_alias[1]);
                } else {
                    $_real_column = $_field;
                    $_column_alias = $_field;
                }
                // store to class properties
                $this->sql_column .= $_field.', ';
                // $this->sort_column[trim($_column_alias)] = trim($_real_column);
                $this->sort_column[trim($_column_alias)] = trim($_column_alias);
            }

            // remove the last comma
            $this->sql_column = substr_replace($this->sql_column, ' ', -2);
        }
        // for debugging purpose only
        // var_dump($this->sort_column); die();
    }


    /**
     * Method to set SQL criteria (WHERE definition) of datagrid
     *
     * @param   string  $str_where_clause
     * @return  void
     */
    public function setSQLCriteria($str_where_clause)
    {
        if (!$str_where_clause) {
            // do nothing
        } else {
            // remove WHERE word if exist
            $str_where_clause = preg_replace("/^WHERE\s/i", '', $str_where_clause);
            $this->sql_criteria = 'WHERE '.$str_where_clause;
        }
    }


    /**
     * Method to set ordering of datagrid
     *
     * @param   string  $str_order_column
     */
    public function setSQLorder($str_order_column)
    {
        if (!$str_order_column) {
            // do nothing
        } else {
            // remove WHERE word if exist
            $this->sql_order = 'ORDER BY '.$str_order_column;
        }
    }


    /**
     * Method to disable sorting link of certain fields in datagrid
     *
     * @param   integer $field_number
     * @return  void
     */
    public function disableSort()
    {
        if (func_num_args() > 0) {
            $this->no_sort_column = func_get_args();
        }
    }


    /**
     * Method to modify column content of field in datagrid
     *
     * @param   integer $int_column_no
     * @param   string  $str_new_value
     * @return  void
     */
    public function modifyColumnContent($int_column_no, $str_new_value)
    {
        $this->modified_content[$int_column_no] = $str_new_value;
    }


    /**
     * Method to remove invisible field
     *
     * @return  void
     */
    protected function removeInvisibleField()
    {
        if (!$this->invisible_fields OR !$this->grid_result_rows) return;
        $_result_rows_buffer = array();
        foreach ($this->grid_result_rows as $_data) {
            foreach ($this->invisible_fields as $_inv_fld) {
                unset($_data[$_inv_fld]);
                // remove header field to
                unset($this->grid_result_fields[$_inv_fld]);
            }
            $_result_rows_buffer[] = $_data;
        }
        $this->grid_result_rows = $_result_rows_buffer;
    }
}

================================================================================
File: simbio_DB\isis\simbio_isis_result.inc.php
================================================================================

<?php
/**
 * simbio_isis_result class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_isis_result extends simbio
{
    # private properties
    var $res_result = false;
    var $query_string = '';
    var $query_type = '';
    var $num_rows = 0;


    /**
     * Class Constructor
     *
     * @param   string      $str_query
     * @param   string      $str_query_type
     * @param   resource    $res_conn
     */
    function simbio_isis_result($str_query, $str_query_type, $res_conn)
    {
        $this->query_string = $str_query;
        $this->query_type = $str_query_type;
        $this->sendQuery($res_conn);
    }


    /**
     * Method to send ISIS DB query
     *
     * @param   resource    $res_conn
     * @return  void
     */
    function sendQuery($res_conn)
    {
        if (($this->query_type == 'search') OR ($this->keywords == '$')) {
            $this->res_result = @isis_search($this->query_string, $res_conn);
        } else {
            $this->res_result = @isis_query($this->query_string, $res_conn);
        }

        if ($this->res_result) {
            // set the num rows property
            $this->num_rows = @isis_num_rows($this->res_result);
            return true;
        } else {
            return false;
        }
    }


    /**
     * Method to fetch record
     *
     * @return  array
     */
    function fetch_assoc()
    {
        if (!$this->res_result) {
            $this->error = "No Resultset can be fetched from query";
            return null;
        } else {
            $_rec = @isis_fetch_flat_array($this->res_result);
        }

        return $_rec;
    }


    /**
     * Method to fetch record
     *
     * @return  array
     */
    public function fetch_row()
    {
        return $this->fetch_assoc();
    }


    /**
     * Method to free resultset memory
     *
     * @return  void
     */
    function free_result()
    {
        if ($this->res_result) {
            @isis_free_result($this->res_result);
        }
    }
}
?>

================================================================================
File: simbio_DB\isis\simbio_isis.inc.php
================================================================================

<?php
/**
 * simbio_isis class
 * Simbio ISIS connection object class
 * This class still using PHP4 class style for backward compability
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

require 'simbio_isis_result.inc.php';

class simbio_isis extends simbio
{
    var $db_name = '';
    var $res_conn = 0;
    var $isis_opt = '-v error -format aligned -encoding ISO8859_1';

    /**
     * Simbio ISIS Class Constructor
     *
     * @param   string  $str_dbname
     */
    function simbio_isis($str_dbname)
    {
        $this->db_name = $str_dbname;
        // execute connection
        $this->connect();
    }


    /**
     * Method to invoke connection to ISIS database
     *
     * @return  void
     */
    function connect()
    {
        $open = @isis_open($this->db_name, $this->isis_opt);
        if ($open) {
            $this->res_conn = $open;
        } else {
            $this->error = "Can't make connection to ".strtoupper($this->isis_db)." ISIS database";
            parent::showError(true);
        }
    }


    /**
     * Method to create/send query to RDBMS
     *
     * @param   string  $str_query
     * @param   string  $str_query_type
     * @return  object
     */
    function query($str_query = '', $str_query_type = 'query')
    {
        if (empty($str_query)) {
            $this->error = 'Cant send ISIS query because query was empty';
            parent::showError(true);
        } else {
            $_result = new simbio_isis_result($str_query, $str_query_type, $this->res_conn);
            // return the result object
            if ($this->error) {
                return false;
            } else {
                return $_result;
            }
        }
    }


    /**
     * Method to close RDBMS connection
     *
     * @return  void
     */
    public function close()
    {
        @isis_close($this->res_conn);
    }
}
?>

================================================================================
File: simbio_DB\pgsql\simbio_pgsql_result.inc.php
================================================================================

<?php
/**
 * simbio_pgsql_result class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

/**
 * A Helper class to contain result fields information
 */
class simbio_pgsql_field_info
{
    public $name;
    public $type;

    /**
     * Class Constructor
     */
    public function __construct()
    {
        // just do nothing
    }
}


class simbio_pgsql_result extends simbio
{
    /**
     * Private properties
     */
    private $res_result = false;
    private $sql_string = '';

    /**
     * Public properties
     */
    public $num_rows = 0;
    public $field_count = 0;
    public $affected_rows = 0;
    public $insert_id = 0;
    public $errno = 0;

    /**
     * Class Constructor
     *
     * @param   string      $str_query
     * @param   resource    $res_conn
     */
    public function __construct($str_query, $res_conn)
    {
        $this->sql_string = trim($str_query);
        $this->sendQuery($res_conn);
    }


    /**
     * Method to send SQL query
     *
     * @param   resource    $res_conn
     * @return  void
     */
    private function sendQuery($res_conn)
    {
        // checking query type
        // if the query return recordset or not
        if (preg_match("/^(SELECT)\s/i", $this->sql_string)) {
            $this->res_result = @pg_query($res_conn, $this->sql_string);
            // error checking
            if (!$this->res_result) {
                $this->errno = 1;
                $this->error = "Query failed to executed. Please check your query again. \n".pg_result_error($this->res_result);
            } else {
                // count number of rows
                $this->num_rows = @pg_num_rows($this->res_result);
            }
        } else {
            $_query = @pg_query($res_conn, $this->sql_string);
            // error checking
            if (!$_query) {
                $this->errno = 1;
                $this->error = "Query failed to executed. Please check your query again. \n".pg_last_error($res_conn);
            } else {
                // get number of affected row
                $this->affected_rows = @pg_affected_rows($_query);
                // get last OID if it is insert operation
                if (preg_match("/^(INSERT)\s/i", $this->sql_string)) {
                    $this->insert_id = @pg_last_oid($_query);
                }
            }
            // nullify query
            $_query = null;
        }
    }


    /**
     * Method to fetch record in associative  array
     *
     * @return  array
     */
    public function fetch_assoc()
    {
        return @pg_fetch_assoc($this->res_result);
    }


    /**
     * Method to fetch record in numeric array indexes
     *
     * @return  array
     */
    public function fetch_row()
    {
        return @pg_fetch_row($this->res_result);
    }


    /**
     * Method to fetch fields information of resultset
     *
     * @return  array
     */
    public function fetch_fields()
    {
        $_fields_info = array();
        $_f = 0;
        $_field_num = pg_num_fields($this->res_result);
        while ($_f < $_field_num) {
            $field_obj = new simbio_pgsql_field_info();
            $field_obj->name = pg_field_name($this->res_result, $_f);
            $field_obj->type = pg_field_type($this->res_result, $_f);
            $_fields_info[] = $field_obj;
            $_f++;
        }
        return $_fields_info;
    }


    /**
     * Method to free resultset memory
     *
     * @return  void
     */
    public function free_result()
    {
        if ($this->res_result) {
            @pg_free_result($this->res_result);
        }
    }
}
?>

================================================================================
File: simbio_DB\mysql\simbio_mysql.inc.php
================================================================================

<?php
/**
 * simbio_mysql class
 * Simbio MySQL connection object class
 * Simbio MySQL try to emulates mysqli object behaviour
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

require 'simbio_mysql_result.inc.php';

class simbio_mysql extends simbio
{
    private $db_host = '127.0.0.1';
    private $db_port = 3306;
    private $db_socket = '';
    private $db_name = '';
    private $db_username = '';
    private $db_passwd = '';
    private $res_conn = false;
    public $affected_rows = 0;
    public $insert_id = 0;
    public $errno = false;

    /**
     * Simbio MySQL Class Constructor
     *
     * @param   string  $str_host
     * @param   string  $str_username
     * @param   string  $str_passwd
     * @param   string  $str_dbname
     * @param   integer $int_port
     * @param   string  $str_socket
     */
    public function __construct($str_host, $str_username, $str_passwd, $str_dbname, $int_port = 3306, $str_socket = '')
    {
        $this->db_host = $str_host;
        $this->db_port = $int_port;
        $this->db_socket = $str_socket;
        $this->db_name = $str_dbname;
        $this->db_username = $str_username;
        $this->db_passwd = $str_passwd;
        // execute connection
        $this->connect();
    }


    /**
     * Method to invoke connection to RDBMS
     *
     * @return  void
     */
    private function connect()
    {
        if ($this->db_socket) {
            $this->res_conn = new mysqli_connect($this->db_host.":".$this->db_socket, $this->db_username, $this->db_passwd);
        } else {
            $this->res_conn = new mysqli_connect($this->db_host.":".$this->db_port, $this->db_username, $this->db_passwd);
        }
        // check the connection status
        if (!$this->res_conn) {
            $this->error = 'Error Connecting to Database. Please check your configuration';
            parent::showError(true);
        } else {
            // select the database
            $db = @mysql_select_db($this->db_name, $this->res_conn);
            if (!$db) {
                $this->error = 'Error Opening Database';
                parent::showError(true);
            }
        }
    }


    /**
     * Method to create/send query to RDBMS
     *
     * @param   string  $str_query
     * @return  object
     */
    public function query($str_query = '')
    {
        if (empty($str_query)) {
            $this->error = "Error on simbio_mysql::query() method : query empty";
            parent::showError(true);
        } else {
            // create simbio_mysql_result object
            $result = new simbio_mysql_result($str_query, $this->res_conn);
            // get any properties from result object
            $this->affected_rows = $result->affected_rows;
            $this->errno = $result->errno;
            $this->error = $result->error;
            $this->insert_id = $result->insert_id;
            // return the result object
            if ($this->error) {
                return false;
            } else {
                return $result;
            }
        }
    }


    /**
     * Method to escape SQL string
     *
     * @param   string  $str_data
     * @return  string
     */
    public function escape_string($str_data)
    {
        return mysql_real_escape_string($str_data, $this->res_conn);
    }


    /**
     * Method to close RDBMS connection
     *
     * @return  void
     */
    public function close()
    {
        mysql_close($this->res_conn);
    }
}
?>

================================================================================
File: simbio_DB\mysql\simbio_mysql_result.inc.php
================================================================================

<?php
/**
 * simbio_mysql_result class
 * This class emulates mysqli mysqli_result object behaviour
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_mysql_result extends simbio
{
    /**
     * Private properties
     */
    private $res_result = false;
    private $sql_string = '';

    /**
     * Public properties
     */
    public $num_rows = 0;
    public $field_count = 0;
    public $affected_rows = 0;
    public $insert_id = 0;
    public $errno = false;


    /**
     * Class Constructor
     *
     * @param   string      $str_query
     * @param   resource    $res_conn
     */
    public function __construct($str_query, $res_conn)
    {
        $this->sql_string = trim($str_query);
        $this->sendQuery($res_conn);
    }


    /**
     * Method to send SQL query
     *
     * @param   resource    $res_conn
     * @return  void
     */
    private function sendQuery($res_conn)
    {
        // checking query type
        // if the query return recordset or not
        if (preg_match("/^SELECT|DESCRIBE|SHOW|EXPLAIN\s/i", $this->sql_string)) {
            $this->res_result = @mysql_query($this->sql_string, $res_conn);
            // error checking
            if (!$this->res_result) {
                $this->error = 'Query ('.$this->sql_string.") failed to executed. Please check your query again \n".mysql_error($res_conn);
                $this->errno = mysql_errno($res_conn);
            } else {
                // count number of rows
                $this->num_rows = @mysql_num_rows($this->res_result);
                $this->field_count = @mysql_num_fields($this->res_result);
            }
        } else {
            $query = @mysql_query($this->sql_string, $res_conn);
            $this->insert_id = @mysql_insert_id($res_conn);
            // error checking
            if (!$query) {
                $this->error = 'Query ('.$this->sql_string.") failed to executed. Please check your query again \n".mysql_error($res_conn);
                $this->errno = mysql_errno($res_conn);
            } else {
                // get number of affected row
                $this->affected_rows = @mysql_affected_rows($res_conn);
            }
            // nullify query
            $query = null;
        }
    }


    /**
     * Method to fetch record in associative  array
     *
     * @return  array
     */
    public function fetch_assoc()
    {
        return @mysql_fetch_assoc($this->res_result);
    }


    /**
     * Method to fetch record in numeric array indexes
     *
     * @return  array
     */
    public function fetch_row()
    {
        return @mysql_fetch_row($this->res_result);
    }


    /**
     * Method to fetch fields information of resultset
     *
     * @return  array
     */
    public function fetch_fields()
    {
        $_fields_info = array();
        $_f = 0;
        $_field_num = mysql_num_fields($this->res_result);
        while ($_f < $_field_num) {
            $_fields_info[] = mysql_fetch_field($this->res_result, $_f);
            $_f++;
        }

        return $_fields_info;
    }


    /**
     * Method to free resultset memory
     *
     * @return  void
     */
    public function free_result()
    {
        if ($this->res_result) {
            @mysql_free_result($this->res_result);
        }
    }
}
?>

================================================================================
File: simbio_DB\pgsql\simbio_pgsql.inc.php
================================================================================

<?php
/**
 * simbio_pgsql class
 * Simbio PostgreSQL connection object class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

require_once 'simbio_pgsql_result.inc.php';

class simbio_pgsql extends simbio
{
    private $db_host = '';
    private $db_port = '';
    private $db_name = '';
    private $db_username = '';
    private $db_passwd = '';
    private $res_conn = 0;
    public $affected_rows = 0;
    public $insert_id = 0;
    public $errno = 0;

    /**
     * Simbio PostgreSQL Class Constructor
     *
     * @param   string  $str_host
     * @param   string  $str_username
     * @param   string  $str_passwd
     * @param   string  $str_dbname
     * @param   integer $int_port
     */
    public function __construct($str_host, $str_username, $str_passwd, $str_dbname, $int_port = 5432)
    {
        $this->db_host = $str_host;
        $this->db_port = $int_port;
        $this->db_name = $str_dbname;
        $this->db_username = $str_username;
        $this->db_passwd = $str_passwd;
        // execute connection
        $this->connect();
    }


    /**
     * Method to invoke connection to RDBMS
     *
     * @return  void
     */
    private function connect()
    {
        $this->res_conn = @pg_connect("host=".$this->db_host." dbname=".$this->db_name.
            " user=".$this->db_username.
            " password=".$this->db_passwd.
            " port=".$this->db_port);
        if (!$this->res_conn) {
            $this->error = "Database fail to connected. \n".pg_last_error($this->res_conn);
            parent::showError(true);
        }
    }


    /**
     * Method to create/send query to RDBMS
     *
     * @param   string  $str_query
     * @return  object
     */
    public function query($str_query = '')
    {
        if (empty($str_query)) {
            $this->error = 'Cant send query because query was empty';
            parent::showError(true);
        } else {
            $_result = new simbio_pgsql_result($str_query, $this->res_conn);
            // get any properties from result object
            $this->affected_rows = $_result->affected_rows;
            $this->errno = $_result->errno;
            $this->error = $_result->error;
            $this->insert_id = $_result->insert_id;
            // return the result object
            if ($this->error) {
                return false;
            } else {
                return $_result;
            }
        }
    }


    /**
     * Method to escape SQL string
     *
     * @param   string  $str_data
     * @return  string
     */
    public function escape_string($str_data)
    {
        return pg_escape_string($this->res_conn, $str_data);
    }


    /**
     * Method to close RDBMS connection
     *
     * @return  void
     */
    public function close()
    {
        pg_close($this->res_conn);
    }
}
?>

================================================================================
File: simbio_DB\sqlite\simbio_sqlite.inc.php
================================================================================

<?php
/**
 * simbio_sqlite class
 * Simbio SQLite connection object class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

require 'simbio_sqlite_result.inc.php';

class simbio_sqlite extends simbio
{
    private $db_name = '';
    private $res_conn = false;
    public $insert_id = 0;
    public $affected_rows = 0;
    public $errno = 0;
    /**
     * Simbio SQLite Class Constructor
     *
     * @param   string  $str_dbname
     */
    public function __construct($str_dbname)
    {
        $this->db_name = $str_dbname;
        // execute connection
        $this->connect();
    }


    /**
     * Method to invoke connection to RDBMS
     *
     * @return  void
     */
    private function connect()
    {
        $this->res_conn = @sqlite_open($this->db_name, 0666, $this->error);
        if ($this->error) {
            parent::showError(true);
        }
    }


    /**
     * Method to create/send query to RDBMS
     *
     * @param   string  $str_query
     * @return  object
     */
    public function query($str_query = '')
    {
        if (empty($str_query)) {
            $this->error = 'Cant send query because query was empty';
            parent::showError(true);
        } else {
            $_result = new simbio_sqlite_result($str_query, $this->res_conn);
            $this->affected_rows = $_result->affected_rows;
            $this->errno = $_result->errno;
            $this->error = $_result->error;
            $this->insert_id = $_result->insert_id;
            // return the result object
            if ($this->error) {
                return false;
            } else {
                return $_result;
            }
        }
    }


    /**
     * Method to escape SQL string
     *
     * @param   string  $str_data
     * @return  string
     */
    public function escape_string($str_data)
    {
        return sqlite_escape_string($str_data);
    }


    /**
     * Method to close RDBMS connection
     *
     * @return  void
     */
    public function close()
    {
        @sqlite_close($this->res_conn);
    }
}
?>

================================================================================
File: simbio_DB\sqlite\simbio_sqlite_result.inc.php
================================================================================

<?php
/**
 * simbio_sqlite_result class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

/**
 * A Helper class to contain result fields information
 */
class simbio_sqlite_field_info
{
    public $name;
    public $type;

    /**
     * Class Constructor
     */
    public function __construct()
    {
        // just do nothing
    }
}


class simbio_sqlite_result extends simbio
{
    /**
     * Private properties
     */
    private $res_result = false;
    private $sql_string = '';

    /**
     * Public properties
     */
    public $num_rows = 0;
    public $field_count = 0;
    public $affected_rows = 0;
    public $insert_id = 0;
    public $errno = 0;

    /**
     * Class Constructor
     *
     * @param   string      $str_query
     * @param   resource    $res_conn
     */
    public function __construct($str_query, $res_conn)
    {
        $this->sql_string = trim($str_query);
        $this->sendQuery($res_conn);
    }


    /**
     * Method to send SQL query
     *
     * @param   resource    $res_conn
     * @return  void
     */
    private function sendQuery($res_conn)
    {
        // checking query type
        // if the query return recordset or not
        if (preg_match("/^(SELECT)\s/i", $this->sql_string)) {
            $this->res_result = @sqlite_query($res_conn, $this->sql_string);
            // error checking
            if (!$this->res_result) {
                $this->errno = sqlite_last_error($res_conn);
                $this->error = "Query failed to executed. Please check your query again. \n".sqlite_error_string($this->errno);
            } else {
                // count number of rows
                $this->num_rows = @sqlite_num_rows($this->res_result);
            }
        } else {
            $_query = @sqlite_unbuffered_query($res_conn, $this->sql_string);
            $this->insert_id = sqlite_last_insert_rowid($res_conn);
            // error checking
            if (!$_query) {
                $this->errno = sqlite_last_error($res_conn);
                $this->error = "Query failed to executed. Please check your query again. \n".sqlite_error_string($this->errno);
            } else {
                // get number of affected row
                $this->affected_rows = @sqlite_changes($res_conn);
            }
            // nullify query
            $_query = null;
        }
    }


    /**
     * Method to fetch record in associative  array
     *
     * @return  array
     */
    public function fetch_assoc()
    {
        return sqlite_fetch_array($this->res_result, SQLITE_ASSOC);
    }


    /**
     * Method to fetch record in numeric array indexes
     *
     * @return  array
     */
    public function fetch_row()
    {
        return sqlite_fetch_array($this->res_result, SQLITE_NUM);
    }


    /**
     * Method to fetch fields information of resultset
     *
     * @return  array
     */
    public function fetch_fields()
    {
        $_fields_info = array();
        $_f = 0;
        $_field_num = sqlite_num_fields($this->res_result);
        while ($_f < $_field_num) {
            $field_obj = new simbio_sqlite_field_info();
            $field_obj->name = sqlite_field_name($this->res_result, $_f);
            $field_obj->type = 'VARCHAR';
            $_fields_info[] = $field_obj;
            $_f++;
        }
        return $_fields_info;
    }


    /**
     * Method to free resultset memory
     *
     * @return  void
     */
    public function free_result()
    {
        if ($this->res_result) {
            unset($this->res_result);
        }
    }
}
?>

================================================================================
File: simbio_FILE\simbio_directory.inc.php
================================================================================

<?php
/**
 * simbio_directory class
 * A Directory operation helper class
 *
 * Copyright (C) 2009  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_directory
{
    private $base_dir = './';
    public $multi_dir_tree = false;

    /**
     * Class constructor
     *
     * @param   string  $str_base_dir
     * @return  array
     */
    public function __construct($str_base_dir)
    {
        if (!file_exists($str_base_dir) OR !is_dir($str_base_dir)) {
            $error = 'Directory '.$str_base_dir.' doesn\'t exists!';
            throw new Exception($error);
        }
        $this->base_dir = self::stripTrailingSlash($str_base_dir);
    }


    /**
     * Method to get directory tree array
     *
     * @param   int     $int_max_downtree
     * @return  array
     */
    public function getDirectoryTree($int_max_downtree = 1, $str_current_dir = '')
    {
        if ($int_max_downtree < 1) {
            return;
        }
        // create directory object
        if ($str_current_dir) {
            $_dir2open = $this->base_dir.DIRECTORY_SEPARATOR.str_replace('/', DIRECTORY_SEPARATOR, $str_current_dir);
            $_dir = dir($_dir2open);
        } else {
            $_dir = dir($this->base_dir);
        }

        $mixed_dir_tree = array();
        // loop directory content and search for directory
        $_d = 0;
        while (false !== ($_entry = $_dir->read())) {
            $_current_entry = $_entry;
            if ($str_current_dir) {
                $_current_entry = $str_current_dir.'/'.$_entry;
            }
            $_current_dir_path = $this->base_dir.DIRECTORY_SEPARATOR.str_replace('/', DIRECTORY_SEPARATOR, $_current_entry);
            if (is_dir($_current_dir_path) AND $_entry != '.' AND $_entry != '..') {
                $mixed_dir_tree[$_current_entry] = $_current_entry;
                // check if this directory have descendant
                $_descendant = self::getDirectoryTree($int_max_downtree-1, $_current_entry);
                if (is_array($_descendant)) {
                    // we create multidimensional array
                    if ($this->multi_dir_tree) {
                        $mixed_dir_tree[$_current_entry.'_tree'] = $_descendant;
                    } else {
                        $mixed_dir_tree = array_merge($mixed_dir_tree, $_descendant);
                    }
                }
                $_d++;
            }
        }
        $_dir->close();
        return ($_d > 0)?$mixed_dir_tree:false;
    }
    
    public function getFileList()
    {
        $_dir = scandir($this->base_dir);
        $files = array();
        // loop directory content and search for directory
        $_d = 0;
        foreach ($_dir as $_content) {
            if (in_array($_content, array('.', '..'))) {
              continue;
            }
            $_current_path = $this->base_dir.DIRECTORY_SEPARATOR.$_content;
            if (is_file($_current_path)) {
              $files[] = $_content;
            }
        }
        return $files;        
    }

    /**
     * Strip trailing directory slash
     *
     * @param   string  $str_dir
     * @return  array
     */
    public static function stripTrailingSlash($str_dir)
    {
        return preg_replace("/(\/|\\\)$/i", '', $str_dir);
    }
}

================================================================================
File: simbio_FILE\simbio_file_upload.inc.php
================================================================================

<?php
/**
 * simbio_file_upload class
 * A File Upload helper class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
  die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
  die("can not access this file directly");
}

/**
 * Upload status constant
 */
define('UPLOAD_FAILED', 0);
define('UPLOAD_SUCCESS', 1);
define('FILETYPE_NOT_ALLOWED', 2);
define('FILESIZE_EXCED', 3);

class simbio_file_upload extends simbio
{
  private $allowable_ext = array('.jpg', '.jpeg', '.gif', '.png', '.html', '.htm', '.pdf', '.doc', '.txt');
  private $max_size = 1024000; // in bytes
  private $upload_dir = './';
  public $new_filename;


  /**
   * Method to set allowable file formats
   *
   * @param   array   $array_allowable_ext
   * @return  void
   */
  public function setAllowableFormat($array_allowable_ext)
  {
    if ($array_allowable_ext == '*') {
      $this->allowable_ext = '*';
      return;
    }

    if (is_array($array_allowable_ext)) {
      $this->allowable_ext = $array_allowable_ext;
    } else {
      echo 'setAllowableFormat method error : The argument for must be an array';
      return;
    }
  }


  /**
   * Method to set maximum size of file to upload
   *
   * @param   integer $int_max_size
   * @return  void
   */
  public function setMaxSize($int_max_size)
  {
    // checking for php.ini upload_size
    $this->max_size = intval($int_max_size);
  }


  /**
   * Method to set upload file directory
   *
   * @param   string  $str_upload_dir
   * @return  void
   */
  public function setUploadDir($str_upload_dir)
  {
    $this->upload_dir = $str_upload_dir;
  }


  /**
   * Method to upload file
   *
   * @param   string  $file_input_name
   * @param   string  $str_new_filename
   * @return  integer
   */
  public function doUpload($file_input_name, $str_new_filename = '')
  {
    // get file extension
    $file_ext = substr($_FILES[$file_input_name]['name'], strrpos($_FILES[$file_input_name]['name'], '.'));
    if (empty($str_new_filename)) {
      $this->new_filename = basename($_FILES[$file_input_name]['name']);
    } else {
      $this->new_filename = $str_new_filename.$file_ext;
    }

    $_isTypeAllowed = 0;
    // checking file extensions
    if ($this->allowable_ext != '*') {
      foreach ($this->allowable_ext as $ext) {
        if ($ext == $file_ext) {
          $_isTypeAllowed++;
        }
      }

      if (!$_isTypeAllowed) {
        $this->error = 'Filetype is forbidden';
        return FILETYPE_NOT_ALLOWED;
      }
    }

    // check for file size
    $_size_kb = ((integer)$this->max_size)/1024;
    if ($_FILES[$file_input_name]['size'] > $this->max_size) {
      $this->error = 'Filesize is excedded maximum uploaded file size';
      return FILESIZE_EXCED;
    }

    // uploading file
    if (self::chunkUpload($_FILES[$file_input_name]['tmp_name'], $this->upload_dir.'/'.$this->new_filename)) {
      return UPLOAD_SUCCESS;
    } else {
      $upload_error = error_get_last();
      $error_msg = '';
      if ($upload_error) {
        $error_msg = 'PHP Error ('.$upload_error['message'].')';
      }
      $this->error = 'Upload failed. Upload directory is not writable or not exists. '.$error_msg;
      return UPLOAD_FAILED;
    }
  }

  public function chunkUpload($tmpfile,$target_file){
    set_time_limit(0);
    $orig_file_size = filesize($tmpfile);
    $chunk_size     = 256; // chunk in bytes
    $upload_start   = 0;
    $handle         = fopen($tmpfile, "rb");
    $fp             = fopen($target_file, 'w');
    while($upload_start < $orig_file_size) {
        $contents = fread($handle, $chunk_size);
        fwrite($fp, $contents);
        if($upload_start % 10000 == 0){
            $count = array('data'=>array('upload_progress' => ceil(($upload_start/$orig_file_size)*100).'%'));
        }
        if (ENVIRONMENT === 'development') {
            echo '<script type="text/javascript">';
            echo 'console.log(\''.json_encode($count).'\')';
            echo '</script>';
        }
        $upload_start += strlen($contents);
        fseek($handle, $upload_start);
    }
    fclose($handle);
    fclose($fp);
    unlink($tmpfile);
    return true;
  }

}

================================================================================
File: simbio_GUI\form_maker\simbio_form_element.inc.php
================================================================================

<?php
/**
 * simbio_form_element
 * Collection of Form Element Class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
  die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
  die("can not access this file directly");
}

/* abstract form element class to be inherited by form element classes */
abstract class abs_simbio_form_element
{
  public $element_type = 'text';
  public $element_name = '';
  public $element_value;
  public $element_options;
  public $element_attr = '';
  public $element_css_class = '';
  public $element_disabled = false;
  public $element_helptext = '';

  /**
   * Below method must be inherited
   *
   * @return  string
   */
  abstract protected function out();
}

/* Text field object */
class simbio_fe_text extends abs_simbio_form_element
{
  public function out()
  {
    $_buffer = '';
    if (!in_array($this->element_type, array('textarea', 'text', 'password', 'button', 'file', 'hidden', 'submit', 'button', 'reset', 'date'))) {
      return 'Unrecognized element type!';
    }
    // check if disabled
    if ($this->element_disabled) {
      $_disabled = ' disabled="disabled"';
    } else { $_disabled = ''; }
    if ($this->element_helptext) {
      $this->element_attr .= ' title="'.$this->element_helptext.'"';
    }
    // maxlength attribute
    if (!stripos($this->element_attr, 'maxlength')) {
      if ($this->element_type == 'text') {
        $this->element_attr .= ' maxlength="256"';
      } else if ($this->element_type == 'textarea') {
        $this->element_attr .= ' maxlength="'.(30*1024).'"';
      }
    }

    // sanitize name for ID
    $_elID = str_replace(array('[', ']', ' '), '', $this->element_name);

    // checking element type
    if ($this->element_type == 'textarea') {
      $_buffer .= '<textarea name="'.$this->element_name.'" id="'.$_elID.'" '.$this->element_attr.''.$_disabled.'>';
      $_buffer .= $this->element_value;
      $_buffer .= '</textarea>'."\n";
    } else if (stripos($this->element_type, 'date', 0) !== false) {
      // Modified by Eddy Subratha
      // Remove class="dateInput" because it should be defined by $this->element_attr
      // $_buffer .= '<div class="dateField"><input class="dateInput" type="'.$this->element_type.'" name="'.$this->element_name.'" id="'.$_elID.'" ';
      $_buffer .= '<div class="dateField">';
      $_buffer .= '<input type="'.$this->element_type.'" name="'.$this->element_name.'" id="'.$_elID.'" value="'.$this->element_value.'" '.$this->element_attr.''.$_disabled.' />';
      $_buffer .= '<a class="calendarLink notAJAX" onclick="javascript: dateType = \''.$this->element_type.'\'; openCalendar(\''.$_elID.'\');" title="Open Calendar"></a>';
      $_buffer .= '</div>'."\n";
    } else {
      $_buffer .= '<input type="'.$this->element_type.'" name="'.$this->element_name.'" id="'.$_elID.'" ';
      $_buffer .= 'value="'.$this->element_value.'" '.$this->element_attr.''.$_disabled.' />'."\n";
    }

     return $_buffer;
  }
}

/* Drop Down Select List object */
class simbio_fe_select extends abs_simbio_form_element
{
  public function out()
  {
    // check for $array_option param
    if (!is_array($this->element_options)) {
      return '<select name="'.$this->element_name.'" '.$this->element_attr.'></select>';
    }
    // check if disabled
    if ($this->element_disabled) {
      $_disabled = ' disabled="disabled"';
    } else { $_disabled = ''; }
    if ($this->element_helptext) {
      $this->element_attr .= ' title="'.$this->element_helptext.'"';
    }
    $_buffer = '<select name="'.$this->element_name.'" id="'.$this->element_name.'" '.$this->element_attr.''.$_disabled.'>'."\n";
    foreach ($this->element_options as $option) {
      if (is_string($option)) {
        // if the selected element is an array then
        // the selected option is also multiple to
        if (is_array($this->element_value)) {
          $_buffer .= '<option value="'.$option.'" '.(in_array($option, $this->element_value)?'selected':'').'>';
          $_buffer .= $option.'</option>'."\n";
        } else {
          $_buffer .= '<option value="'.$option.'" '.(($option == $this->element_value)?'selected':'').'>';
          $_buffer .= $option.'</option>'."\n";
        }
      } else {
        if (is_array($this->element_value)) {
          $_buffer .= '<option value="'.$option[0].'" '.(in_array($option[0], $this->element_value)?'selected':'').'>';
          $_buffer .= $option[1].'</option>'."\n";
        } else {
          $_buffer .= '<option value="'.$option[0].'" '.(($option[0] == $this->element_value)?'selected':'').'>';
          $_buffer .= $option[1].'</option>'."\n";
        }
      }
    }
    $_buffer .= '</select>'."\n";

    return $_buffer;
  }
}

/* AJAX drop down select list object */
class simbio_fe_AJAX_select extends abs_simbio_form_element
{
  /**
   * AJAX drop down special properties
   */
  public $handler_URL = 'about:blank';
  public $element_dd_list_class = 'ajaxDDlist';
  public $element_dd_list_default_text = 'SEARCHING...';
  public $additional_params = '';

  public function out()
  {
    $_buffer = '<input type="text" autocomplete="off" id="'.$this->element_name.'" name="'.$this->element_name.'" class="'.$this->element_css_class.' notAJAX" onkeyup="showDropDown(\''.$this->handler_URL.'\', \''.$this->element_name.'\', \''.$this->additional_params.'\')" value="'.$this->element_value.'" />';
    $_buffer .= '<ul class="'.$this->element_dd_list_class.'" id="'.$this->element_name.'List"><li style="padding: 2px; font-weight: bold;">'.$this->element_dd_list_default_text.'</li></ul>';

    return $_buffer;
  }
}

/* Checkbox button groups object */
class simbio_fe_checkbox extends abs_simbio_form_element
{
  public function out()
  {
    // check for $this->element_options param
    if (!is_array($this->element_options)) {
      return 'The radio button options list must be an array';
    } else {
      foreach ($this->element_options as $cbox) {
        // if the $cbox is not an array
        if (!is_array($cbox)) {
          return 'The radio button options list must be a 2 multi-dimensional array';
        }
      }
    }

    $_elmnt_num = count($this->element_options);
    $_row_column = 5;
    $_helptext = '';

    // check if disabled
    if ($this->element_disabled) {
      $_disabled = ' disabled="disabled"';
    } else { $_disabled = ''; }
    if ($this->element_helptext) {
      $_helptext .= ' title="'.$this->element_helptext.'"';
    }
    $_buffer = '';
    if ($_elmnt_num <= $_row_column) {
      foreach ($this->element_options as $idx => $_cbox) {
        if (is_array($this->element_value)) {
          $_buffer .= '<div '.$_helptext.'><input type="checkbox" id="simbio-checkbox-'.$idx.'" name="'.$this->element_name.'[]"'
            .' value="'.$_cbox[0].'" style="border: 0;" '.(in_array($_cbox[0], $this->element_value)?'checked':'').$_disabled.' />'
            .' <label for="simbio-checkbox-'.$idx.'">'.$_cbox[1]."</label></div>\n";
        } else {
          $_buffer .= '<div '.$_helptext.'><input type="checkbox" id="simbio-checkbox-'.$idx.'" name="'.$this->element_name.'[]"'
            .' value="'.$_cbox[0].'" style="border: 0;" '.(($_cbox[0] == $this->element_value)?'checked':'').$_disabled.' />'
            .' <label for="simbio-checkbox-'.$idx.'">'.$_cbox[1]."</label></div>\n";
        }
      }
    } else {
      $_column_array = array_chunk($this->element_options, $_row_column);
      $_buffer = '<table '.$_helptext.'>'."\n";
      $_buffer .= '<tr>'."\n";
      foreach ($_column_array as $_chunked_options) {
        $_buffer .= '<td valign="top">'."\n";
        foreach ($_chunked_options as $idx => $_cbox) {
          if (is_array($this->element_value)) {
            $_buffer .= '<div><input type="checkbox" id="simbio-checkbox-'.$idx.'" name="'.$this->element_name.'[]"'
              .' value="'.$_cbox[0].'" style="border: 0;" '.(in_array($_cbox[0], $this->element_value)?'checked':'').$_disabled.' />'
              .' <label for="simbio-checkbox-'.$idx.'">'.$_cbox[1]."</label></div>\n";
          } else {
            $_buffer .= '<div><input type="checkbox" id="simbio-checkbox-'.$idx.'" name="'.$this->element_name.'[]"'
              .' value="'.$_cbox[0].'" style="border: 0;" '.(($_cbox[0] == $this->element_value)?'checked':'').$_disabled.' />'
              .' <label for="simbio-checkbox-'.$idx.'">'.$_cbox[1]."</label></div>\n";
          }
        }
        $_buffer .= '</td>'."\n";
      }
      $_buffer .= '</tr>'."\n";
      $_buffer .= '</table>'."\n";
    }

    return $_buffer;
  }
}


/* Radio button groups object */
class simbio_fe_radio extends abs_simbio_form_element
{
  public function out()
  {
    // check for $this->element_options param
    if (!is_array($this->element_options)) {
      return 'The third argument must be an array';
    }

    $_buffer = '';

    // number of element in each column
    if (count($this->element_options) > 10) {
      $_elmnt_each_column = 4;
    } else {
      $_elmnt_each_column = 2;
    }

    $_helptext = '';

    if ($this->element_helptext) {
      $_helptext .= ' title="'.$this->element_helptext.'"';
    }

    // chunk the array into pieces of array
    $_chunked_array = array_chunk($this->element_options, $_elmnt_each_column, true);

    $_buffer .= '<table '.$_helptext.'>'."\n";
    $_buffer .= '<tr>'."\n";
    foreach ($_chunked_array as $_chunk) {
      $_buffer .= '<td valign="top">';
      foreach ($_chunk as $order => $_radio) {
        if ($_radio[0] == $this->element_value) {
          $_buffer .= '<div><input style="cursor:pointer" type="radio" name="'.$this->element_name.'" id="'.$this->element_name.$order.'"'
            .' value="'.$_radio[0].'" style="border: 0;" checked />'
            .' <label style="cursor:pointer" for="'.$this->element_name.$order.'">'.$_radio[1]."</label></div>\n";
        } else {
          $_buffer .= '<div><input style="cursor:pointer" type="radio" name="'.$this->element_name.'" id="'.$this->element_name.$order.'"'
            .' value="'.$_radio[0].'" style="border: 0;" />'
            .' <label style="cursor:pointer" for="'.$this->element_name.$order.'">'.$_radio[1]."</label></div>\n";
        }
      }
      $_buffer .= '</td>';
    }
    $_buffer .= '</tr>'."\n";
    $_buffer .= '</table>'."\n";

    return $_buffer;
  }
}

/* Date field */
/* Global vars containing date and month array */
$simbio_fe_date_array = array( array('01', strtoupper(__('Date')), '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
  '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
  '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'));
$simbio_fe_date_month_array = array( array('01', strtoupper(__('Month')), array('01', 'January'), array('02', 'February'), array('03', 'March'),
  array('04', 'April'), array('05', 'May'), array('06', 'June'),
  array('07', 'July'), array('08', 'August'), array('09', 'September'),
  array('10', 'October'), array('11', 'November'), array('12', 'December')));

/* Depecrated class for compability with older code */
class simbio_form_element
{
  /**
   * Static Method to create input field form element
   *
   * @param   string  $str_elmnt_type
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_value
   * @param   string  $str_elmnt_attr
   */
  public static function textField($str_elmnt_type, $str_elmnt_name, $str_elmnt_value = '', $str_elmnt_attr = '')
  {
    $_textField = new simbio_fe_text();
    $_textField->element_type = $str_elmnt_type;
    $_textField->element_name = $str_elmnt_name;
    $_textField->element_value = $str_elmnt_value;
    $_textField->element_attr = $str_elmnt_attr;
    return $_textField->out();
  }


  /**
   * Static Method to create form element
   *
   * @param   string  $str_elmnt_name
   * @param   array   $array_option
   * @param   string  $str_default_selected
   * @param   string  $str_elmnt_attr
   * @return  string
   */
  public static function selectList($str_elmnt_name, $array_option, $str_default_selected = '', $str_elmnt_attr = '')
  {
    $_selectList = new simbio_fe_select();
    $_selectList->element_name = $str_elmnt_name;
    $_selectList->element_value = $str_default_selected;
    $_selectList->element_attr = $str_elmnt_attr;
    $_selectList->element_options = $array_option;
    return $_selectList->out();
  }


  /**
   * Static Method to create form element
   *
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_label
   * @param   array   $array_chbox
   * @return  string
   */
  public static function checkBox($str_elmnt_name, $array_chbox, $default_checked = '')
  {
    $_checkBox = new simbio_fe_checkbox();
    $_checkBox->element_name = $str_elmnt_name;
    $_checkBox->element_value = $default_checked;
    $_checkBox->element_options = $array_chbox;
    return $_checkBox->out();
  }


  /**
   * Static Method to create form element
   *
   * @param   string  $str_elmnt_name
   * @param   array   $array_option
   * @param   string  $default_checked
   * @return  string
   */
  public static function radioButton($str_elmnt_name, $array_option, $default_checked = '')
  {
    $_radio = new simbio_fe_radio();
    $_radio->element_name = $str_elmnt_name;
    $_radio->element_value = $default_checked;
    $_radio->element_options = $array_option;
    return $_radio->out();
  }


  /**
   * Static Method to create date input field form element
   *
   * @param   string  $str_date_elmnt_name
   * @param   string  $str_month_elmnt_name
   * @param   string  $str_year_elmnt_name
   * @param   string  $str_date
   * @return  string
   */
  public static function dateField($str_elmnt_name, $str_elmnt_value = '', $str_elmnt_attr = '')
  {
    return self::textField('date', $str_elmnt_name, $str_elmnt_value, $str_elmnt_attr);
  }


  /**
   * Static Method to create form element
   *
   * @param   string  $str_date_elmnt_name
   * @param   string  $str_elmnt_value
   * @return  string
   */
  public static function hiddenField($str_elmnt_name, $str_elmnt_value)
  {
    $_textField = new simbio_fe_text();
    $_textField->element_type = 'hidden';
    $_textField->element_name = $str_elmnt_name;
    $_textField->element_value = $str_elmnt_value;
    return $_textField->out();
  }
}

================================================================================
File: simbio_GUI\form_maker\simbio_form_table.inc.php
================================================================================

<?php
/**
 * simbio_form_table
 * Class for creating form with HTML table layout
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

require 'simbio_form_maker.inc.php';

class simbio_form_table extends simbio_form_maker
{
    public $table_attr;
    public $table_header_attr;
    public $table_content_attr;
    public $submit_button_attr = 'name="submit" value="Save Data" class="s-btn btn btn-primary"';
    public $with_form_tag = true;
    public $edit_mode = false;
    public $record_id = false;
    public $record_title = 'RECORD';
    // back button
    public $back_button = true;
    public $delete_button = true;

    /**
     * Class Constructor
     *
     * @param   string  $str_form_name
     * @param   string  $str_form_action
     * @param   string  $str_form_method
     * @param   boolean $bool_enable_upload
     */
    public function __construct($str_form_name, $str_form_action, $str_form_method = 'post', $bool_enable_upload = true)
    {
        // execute parent constructor
        parent::__construct($str_form_name, $str_form_action, $str_form_method, $bool_enable_upload);
    }


    /**
     * Method to print out form table
     *
     * @return  string
     */
    public function printOut()
    {
        // create table object
        $_table = new simbio_table();
        // set the table attr
        $_table->table_attr = $this->table_attr;
		if ($this->edit_mode) {
			$this->disable = true;
		}

        $_buffer = '';
        // check if form tag is included
        if ($this->with_form_tag) {
            $_buffer .= $this->startForm()."\n";
        }

        // loop the form element
        $_row_num = 0;
        foreach ($this->elements as $row) {
           $_form_element = $row['element']->out();
           if ($_form_element_info = trim($row['info']??'')) {
               $_form_element .= '<div class="formElementInfo">'.$_form_element_info.'</div>';
           }
           // append row
           $_table->appendTableRow(array($row['label'], ':', $_form_element));
           // set the column header attr
           $_table->setCellAttr($_row_num+1, 0, 'width="20%" valign="top"'.$this->table_header_attr);
           $_table->setCellAttr($_row_num+1, 1, 'width="1%" valign="top"'.$this->table_header_attr);
           // set the form element column attr
           $_table->setCellAttr($_row_num+1, 2, 'width="79%" '.$this->table_content_attr);
           $_row_num++;
        }

        // link and buttons
        $_edit_link = '';
        $_delete_button = '';
        $_back_button = '';

		$_del_value = __('Delete Record');
        $_cancel_value = __('Cancel');

        // check if we are on edit form mode
        if ($this->edit_mode) {
            $_edit_link .= '<a href="#" class="s-btn btn btn-default editFormLink notAJAX">' . __('Edit') . '</a>';
            // back button
            if ($this->back_button) {
                $_back_button = '<input type="button" class="s-btn btn btn-default cancelButton" value="'.$_cancel_value.'" onclick="javascript: self.history.back();" />';
            }
            // delete button exists if the record_id exists
            if ($this->record_id && $this->delete_button) {
                $_delete_button = '<input type="button" value="'.$_del_value.'" class="s-btn btn btn-danger" onclick="confSubmit(\'deleteForm\', \'' . addslashes(str_replace('{recordTitle}', $this->record_title, __('Are you sure to delete {recordTitle}?'))) . '\n' . addslashes(__('Once deleted, it can\'t be restored!')) .'\')" />';
            }
        }

        $_buttons = '';
        if ($this->with_form_tag) {
            $_buttons = '<table class="s-table__action" cellspacing="0" cellpadding="0" style="width: 100%;">'
                .'<tr><td><input type="submit" '.$this->submit_button_attr.' />&nbsp;'.$_delete_button.'</td><td align="right">'.$_back_button.'&nbsp;'.$_edit_link.'</td>'
                .'</tr></table>'."\n";
        }
        // get the table result
        $_buffer .= $_buttons;
        $_buffer .= $_table->printTable();
        $_buffer .= $_buttons;

        // extract all hidden elements here
        foreach ($this->hidden_elements as $_hidden) {
            $_buffer .= $_hidden->out();
        }
        // update ID hidden elements
        if ($this->edit_mode AND $this->record_id) {
            // add hidden form element flag for detail editing purpose
            $_buffer .= '<input type="hidden" name="updateRecordID" value="'.$this->record_id.'" />';
        }

        // check if form tag is included
        if ($this->with_form_tag) {
            $_buffer .= $this->endForm()."\n";
        }

        if ($this->edit_mode) {
            // hidden form for deleting records
            $_buffer .= '<form action="'.$this->form_action.'" id="deleteForm" class="disabled" method="post" class="form-inline"><input type="hidden" name="itemID" value="'.$this->record_id.'" /><input type="hidden" name="itemAction" value="true" /></form>';
        }
        // output
        return $_buffer;
    }
}

================================================================================
File: simbio_GUI\paging\simbio_paging.inc.php
================================================================================

<?php
/**
 * simbio_paging_ajax
 * Paging Generator class
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_paging
{
    /**
     * Static Method to print out the paging list
     *
     * @param   integer $int_all_recs_num
     * @param   integer $int_recs_each_page
     * @param   integer $int_pages_each_set
     * @param   string  $str_fragment
     * @param   string  $str_target_frame
     * @return  string
     */
    public static function paging($int_all_recs_num, $int_recs_each_page, $int_pages_each_set = 10, $str_fragment = '', $str_target_frame = '_self')
    {
        // check for wrong arguments
        if ($int_recs_each_page > $int_all_recs_num) {
            return;
        }

        // total number of pages
        $_num_page_total = ceil($int_all_recs_num/$int_recs_each_page);

        if ($_num_page_total < 2) {
            return;
        }

        // total number of pager set
        $_pager_set_num = ceil($_num_page_total/$int_pages_each_set);

        // check the current page number
        if (isset($_GET['page']) AND $_GET['page'] > 1) {
            $_page = (integer)$_GET['page'];
        } else {$_page = 1;}

        // check the query string
        if (isset($_SERVER['QUERY_STRING']) AND !empty($_SERVER['QUERY_STRING'])) {
            parse_str($_SERVER['QUERY_STRING'], $arr_query_var);
            // renew csrf token
            if (isset($arr_query_var['csrf_token'])) $arr_query_var['csrf_token'] = $_SESSION['csrf_token']??'';
            // rebuild query str without "page" var
            $_query_str_page = '';
            foreach ($arr_query_var as $varname => $varvalue) {
                if (is_string($varvalue)) {
                    $varvalue = urlencode($varvalue);
                    if ($varname != 'page') {
                        $_query_str_page .= simbio_security::xssFree($varname).'='.simbio_security::xssFree($varvalue).'&';
                    }
                } else if (is_array($varvalue)) {
                    foreach ($varvalue as $e_val) {
                        if ($varname != 'page') {
                            $_query_str_page .= simbio_security::xssFree($varname).'[]='.simbio_security::xssFree($e_val).'&';
                        }
                    }
                }
            }
            // append "page" var at the end
            $_query_str_page .= 'page=';
            // create full URL
            $_current_page = $_SERVER['PHP_SELF'].'?'.$_query_str_page;
        } else {
            $_current_page = $_SERVER['PHP_SELF'].'?page=';
        }

        // target frame
        $str_target_frame = 'target="'.$str_target_frame.'"';

        // init the return string
        $_buffer = '<span class="pagingList">';
        $_stopper = 1;

        // count the offset of paging
        if (($_page > 5) AND ($_page%5 == 1)) {
            $_lowest = $_page-5;
            if ($_page == $_lowest) {
                $_pager_offset = $_lowest;
            } else {
                $_pager_offset = $_page;
            }
        } else if (($_page > 5) AND (($_page*2)%5 == 0)) {
            $_lowest = $_page-5;
            $_pager_offset = $_lowest+1;
        } else if (($_page > 5) AND ($_page%5 > 1)) {
            $_rest = $_page%5;
            $_pager_offset = $_page-($_rest-1);
        } else {
            $_pager_offset = 1;
        }

        // Previous page link
				$_first = __('First Page');

				$_prev = __('Previous');

        if ($_page > 1) {
            $_buffer .= '<a href="'.$_current_page.(1).$str_fragment.'" '.$str_target_frame.' class="first_link">'.$_first.'</a>'."\n";
            $_buffer .= '<a href="'.$_current_page.($_page-1).$str_fragment.'" '.$str_target_frame.' class="prev_link">'.$_prev.'</a>'."\n";
        }

        for ($p = $_pager_offset; ($p <= $_num_page_total) AND ($_stopper < $int_pages_each_set+1); $p++) {
            if ($p == $_page) {
                $_buffer .= '<b>'.$p.'</b>'."\n";
            } else {
                $_buffer .= '<a href="'.$_current_page.$p.$str_fragment.'" '.$str_target_frame.'>'.$p.'</a>'."\n";
            }

            $_stopper++;
        }

        // Next page link
				$_next = __('Next');

        if (($_pager_offset != $_num_page_total-4) AND ($_page != $_num_page_total)) {
            $_buffer .= '<a href="'.$_current_page.($_page+1).$str_fragment.'" '.$str_target_frame.' class="next_link">'.$_next.'</a>'."\n";
        }

        // Last page link
				$_last = __('Last Page');

        if ($_page < $_num_page_total) {
            $_buffer .= '<a href="'.$_current_page.($_num_page_total).$str_fragment.'" '.$str_target_frame.' class="last_link">'.$_last.'</a>'."\n";
        }

        $_buffer .= '</span>';

        return $_buffer;
    }
}

================================================================================
File: simbio_GUI\form_maker\simbio_form_table_AJAX.inc.php
================================================================================

<?php
/**
 * simbio_form_table_AJAX
 * Class for creating form with HTML table layout with iframe submission model
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

require 'simbio_form_maker.inc.php';

class simbio_form_table_AJAX extends simbio_form_maker
{
    public $table_attr;
    public $table_header_attr;
    public $table_content_attr;
    public $submit_button_attr = 'name="submit" value="Save Data" class="s-btn btn btn-primary"';
    public $with_form_tag = true;
    public $edit_mode = false;
    public $record_id = false;
    public $record_title = 'RECORD';
    public $customBtn = false;
    // back button
    public $back_button = true;
    public $delete_button = true;
    public $name = '';
    public $str = '';
    public $url = '';
    public $style = '';

    # CONSTRUCTOR
    public function __construct($str_form_name, $str_form_action, $str_form_method = 'post')
    {
        // execute parent constructor
        parent::__construct($str_form_name, $str_form_action, $str_form_method);
    }


    # public
    # print out the form table object
    # return : string
    public function printOut()
    {
      // create table object
      $_table = new simbio_table();
      // set the table attr
      $_table->table_attr = $this->table_attr;
		  if ($this->edit_mode) {
			  $this->disable = true;
		  }

      // initialize result buffer
      $_buffer = '';

      // check if form tag is included
      if ($this->with_form_tag) {
          $this->submit_target = 'submitExec';
          // for debugging purpose only
          if (ENVIRONMENT === 'development') 
          {
            $_buffer .= '<small class="mx-1"># Debug</small>|<button id="enlargeBox" class="btn btn-link mx-1 p-0">' . __('Enlarge Debug Box') . '</button>';
            $_buffer .= '<iframe id="submitExec" name="submitExec" class="border border-secondary w-100" style="height: 50px;"></iframe>';
            $_buffer .= '<script>$(\'#enlargeBox\').click(function() {$(\'#submitExec\').attr(\'style\', \'height: 500px;\')})</script>';
          }
          $_buffer .= $this->startForm()."\n";
      }

      // loop the form element
      $_row_num = 0;
      foreach ($this->elements as $row) {
         $_form_element = $row['element']->out();
         if ($_form_element_info = trim($row['info']??'')) {
             $_form_element .= '<div class="formElementInfo">'.$_form_element_info.'</div>';
         }
         // append row
         $_table->appendTableRow(array($row['label'], ':', $_form_element));
         if(!empty($row['element']->element_name))
         {
            $_table->setCellAttr($_row_num+1, null, 'id="simbioFormRow' . $row['element']->element_name . '"');
         }
         // set the column header attr
         $_table->setCellAttr($_row_num+1, 0, 'width="20%" valign="top"'.$this->table_header_attr);
         $_table->setCellAttr($_row_num+1, 1, 'width="1%" valign="top"'.$this->table_header_attr);
         // set the form element column attr
         $_table->setCellAttr($_row_num+1, 2, 'width="79%" '.$this->table_content_attr);
         $_row_num++;
      }

      // link and buttons
      $_edit_link = '';
      $_delete_button = '';
      $_custom_link = '';
      $_back_button = '';
      $_del_value = __('Delete Record');
      $_cancel_value = __('Cancel');

      // check if we are on edit form mode
      if ($this->edit_mode) {
          $_edit_link .= '<a href="#" class="notAJAX editFormLink btn btn-default">' . __('Edit') . '</a>';
          if($this->customBtn){
            $_custom_link .= '<a href="'.$this->url.'" '.$this->style.'">' . $this->str . '</a>';
          }
          // back button
          if ($this->back_button) {
              $_back_button = '<input type="button" class="s-btn btn btn-default cancelButton " value="'.$_cancel_value.'" />';
          }
          // delete button exists if the record_id properties exists
          if ($this->record_id && $this->delete_button) {
              // create delete button
              $_delete_button = '<input type="button" value="'.$_del_value.'" class="s-btn btn btn-danger confirmSubmit" onclick="confSubmit(\'deleteForm\', \'' . addslashes(str_replace('{recordTitle}', $this->record_title, __('Are you sure to delete {recordTitle}?'))) . '\n' . addslashes(__('Once deleted, it can\'t be restored!')) .'\')" />';
          }
      }

      $_buttons = '';
      // check if form tag is included
      if ($this->with_form_tag) {
          $_buttons = '<table cellspacing="0" cellpadding="3" style="width: 100%;">'
              .'<tr><td><input type="submit" class="s-btn btn btn-primary" '.$this->submit_button_attr.' />&nbsp;'.$_delete_button.'</td><td class="edit-link-area">'.$_back_button.'&nbsp;'.$_edit_link.'&nbsp;'.$_custom_link.'</td>'
              .'</tr></table>'."\n";
      }
      // get the table result
      $_buffer .= $_buttons;
      $_buffer .= $_table->printTable();
      $_buffer .= $_buttons;

      // extract all hidden elements here
      foreach ($this->hidden_elements as $_hidden) {
          $_buffer .= $_hidden->out();
      }
      // update ID hidden elements
      if ($this->edit_mode AND $this->record_id) {
          // add hidden form element flag for detail editing purpose
          $_buffer .= '<input type="hidden" name="updateRecordID" value="'.$this->record_id.'" />';
      }

      // check if form tag is included
      if ($this->with_form_tag) {
          $_buffer .= $this->endForm()."\n";
      }

      if ($this->edit_mode) {
          // hidden form for deleting records
          $_buffer .= $this->createDeleteForm();
      }
      // hidden iframe for form executing
      if (ENVIRONMENT !== 'development') $_buffer .= '<iframe name="submitExec" class="noBlock" style="display: none; visibility: hidden; width: 100%; height: 0;"></iframe>';

      return $_buffer;
    }

    /**
     * Private method to create hidden form for deleting records
     */
    private function createDeleteForm() {
      $form_name = 'deleteForm';
      $form_token = self::genRandomToken();
      $form  = '<form action="'.preg_replace('/\?.+/i', '', $this->form_action)
                .'" name="'.$form_name.'" id="'.$form_name.'" target="submitExec" method="post" class="form-inline">';
      $form .= '<input type="hidden" name="csrf_token" value="'.$form_token.'" />';
      $form .= '<input type="hidden" name="form_name" value="'.$form_name.'" />';
      $form .= '<input type="hidden" name="itemID" value="'.$this->record_id.'" /><input type="hidden" name="itemAction" value="true" /></form>';
      if (isset($_SESSION)) {
        $_SESSION['csrf_token'][$form_name] = $form_token;
      }

      return $form;
    }


    public function addCustomBtn($name,$str,$url,$style){
      $this->customBtn = true;
      $this->name = $name;
      $this->str = $str;
      $this->url = $url;
      $this->style = $style;

    }
}

================================================================================
File: simbio_GUI\table\simbio_table.inc.php
================================================================================

<?php
/**
 * simbio_table class
 * Class for creating HTML table
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_table_field
{
    public $attr;
    public $value;

    /**
     * Class Constructor
     *
     * @param   string  $str_attr
     */
    public function __construct($str_attr = '')
    {
        $this->attr = $str_attr;
    }
}


class simbio_table_row
{
    public $attr;
    public $fields = array();
    public $all_cell_attr;

    /**
     * Class Constructor
     *
     * @param   string  $str_attr
     */
    public function __construct($array_field_content, $str_attr = '')
    {
        $this->attr = $str_attr;
        $this->addFields($array_field_content);
    }


    /**
     * Method to create simbio_table_field array from array
     *
     * @param   array   $array_field_content
     * @return  array
     */
    public function addFields($array_field_content)
    {
        foreach ($array_field_content as $idx => $fld_content) {
            $_field_obj = new simbio_table_field();
            $_field_obj->value = $fld_content;
            $this->fields[$idx] = $_field_obj;
        }
    }
}


class simbio_table
{
    public $table_ID = 'datatable';
    public $table_attr = '';
    public $table_header_attr = '';
    public $table_content_attr = '';
    public $table_row = array();
    public $row_attr = array();
    public $cell_attr = array();
    public $highlight_row = false;
    private $have_header = false;

    /**
     * Class Constructor
     *
     * @param   string  $str_table_attr
     */
    public function __construct($str_table_attr = '')
    {
        $this->table_attr = $str_table_attr;
    }


    /**
     * Method to set table headers
     *
     * @param   array   $array_column_value
     * @return  void
     */
    public function setHeader($array_column_content)
    {
        if (!is_array($array_column_content)) {
            // do nothing
            return;
        } else {
            $this->have_header = true;
            $this->table_row[0] = new simbio_table_row($array_column_content);
        }
    }


    /**
     * Method to append row/record to table
     *
     * @param   array   $array_column_content
     * @return  void
     */
    public function appendTableRow($array_column_content)
    {
        // row content must be an array
        if (!is_array($array_column_content)) {
            // do nothing
            return;
        } else {
            // records row must start with index 1 not 0
            // index 0 is reserved for table header row
            $_row_cnt = count($this->table_row);
            // create instance of simbio_table_row
            $_row_obj = new simbio_table_row($array_column_content);
            if ($_row_cnt < 1) {
                $this->table_row[1] = $_row_obj;
            } else {
                // if header row exists
                if (isset($this->table_row[0])) {
                    $this->table_row[$_row_cnt] = $_row_obj;
                } else {
                    $this->table_row[$_row_cnt+1] = $_row_obj;
                }
            }
        }
    }


    /**
     * Method to set content of specific column
     *
     * @param   integer $int_row
     * @param   integer $int_column
     * @param   string  $str_column_content
     * @return  void
     */
    public function setColumnContent($int_row, $int_column, $str_column_content)
    {
        if (!isset($this->table_row[$int_row]->fields[$int_column])) {
           // do nothing
           return;
        } else {
           $this->table_row[$int_row]->fields[$int_column]->value = $str_column_content;
        }
    }



    /**
     * Method to get content of specific column
     *
     * @param   integer $int_row
     * @param   integer $int_column
     * @param   string  $str_column_content
     * @return  mixed
     */
    public function getColumnContent($int_row, $int_column, $str_column_content)
    {
        if (isset($this->table_row[$int_row]->fields[$int_column])) {
            return $this->table_row[$int_row]->fields[$int_column]->value;
        } else {
            return null;
        }
    }


    /**
     * Method to set specific column attribute
     *
     * @param   integer $int_row
     * @param   integer $int_column
     * @param   string  $str_column_attr
     * @return  void
     */
    public function setCellAttr($int_row = 0, $int_column = null, $str_column_attr = null)
    {
        if (is_null($int_column)) {
            $this->row_attr[$int_row] = $str_column_attr;
        } else {
            $this->cell_attr[$int_row][$int_column] = $str_column_attr;
        }
    }


    /**
     * Method to print out table
     *
     * @return string
     */
    public function printTable()
    {
        $_buffer = '<table '.$this->table_attr.'>'."\n";

        // check if the array have a records
        if (count($this->table_row) < 1) {
            $_buffer .= '<tr><td align="center" class="s-table__no-data">'.__('No Data').'</td></tr>';
        } else {
            // set header style if exist
            $this->setCellAttr(0, null, $this->table_header_attr);

            // records
            $_record_row = 0;
            foreach ($this->table_row as $_row_idx => $_row) {
                if (!$_row instanceof simbio_table_row) {
                    continue;
                }
                // print out the row objects
                $_buffer .= '<tr '.( isset($this->row_attr[$_row_idx])?$this->row_attr[$_row_idx]:'' ).'>';
                foreach ($_row->fields as $_field_idx => $_field) {
                    if (isset($this->cell_attr[$_row_idx][$_field_idx])) {
                        $_field->attr = $this->cell_attr[$_row_idx][$_field_idx];
                    }
                    $_buffer .= '<td '.$_field->attr.'>'.$_field->value.'</td>';
                }
                $_buffer .= '</tr>'."\n";
                $_record_row++;
            }
        }

        $_buffer .= '</table>'."\n";
        return $_buffer;
    }
}
?>

================================================================================
File: simbio_GUI\template_parser\simbio_template_parser.inc.php
================================================================================

<?php
/**
 * simbio_template_parser class
 * Simbio Template parser class for easy templating
 *
 * Copyright (C) 2009  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
    die("can not access this file directly");
}

class simbio_template_parser
{
    private $file = ''; // variable to store template name info
    private $result = ''; // variable to store template result


    /**
     * Class Constructor
     *
     * @param   string  $tpl_file_path
     * @return  void
     */
    public function __construct($tpl_file_path)
    {
        // check if file exists
        if (!file_exists($tpl_file_path)) {
            die('Template file '.$tpl_file_path.' doesnt exists!');
        }

        // check if the template file is HTML or not
        if (substr($tpl_file_path, -5) != '.html') {
            die('Template file must be HTML file!');
        } else {
            $this->file = $tpl_file_path;
        }

        // reading template file and store it into result properties
        if ($tpl_str = file_get_contents($this->file)) {
            $this->result = $tpl_str;
        } else {
           die('<div style="border: 1px solid #FF0000; color: #FF0000;">Template file '.$this->file.' cant be opened!</div>');
        }
    }


    /**
     * Method assign content to template marker
     *
     * @param   string  $str_maker
     * @param   string  $str_replacement
     * @param   boolean $bool_show_error
     * @return  void
     */
    public function assign($str_maker, $str_replacement, $bool_show_error = false)
    {
        if (!preg_match("/".preg_quote($str_maker)."/i", $this->result)) {
            if ($bool_show_error) {
                $str_maker = str_ireplace(array('<!--','-->'), '', $str_maker);
                echo "Marker : <b>".htmlentities($str_maker)."</b> doesnt exist in ".$this->file;
            }
            return;
        }
        $this->result = str_ireplace($str_maker, $str_replacement, $this->result);
        // get any gettext marker
        preg_match_all('@<!--__\(.+\)-->@i', $this->result, $_gettext);
        if (count($_gettext[0]) > 0) {
            foreach ($_gettext[0] as $_trans_mark) {
                $_trans_text = str_replace(array('<!--__(\'','\')-->'), '', $_trans_mark);
                $this->result = str_ireplace($_trans_mark, __($_trans_text), $this->result);
            }
        }
    }


    /**
     * Method to print out the template
     *
     * @return  void
     */
    public function printOut()
    {
        echo $this->result;
    }
}
?>

================================================================================
File: simbio_UTILS\simbio_security.inc.php
================================================================================

<?php
/**
 * simbio_security class
 * A Collection of static function for web security
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

class simbio_security
{
    /**
     * Static Method to redirect page to https equivalent
     *
     * @param   integer $int_https_port
     * @return  void
     */
    public static function doCheckHttps($int_https_port)
    {
        $server_https_port = $_SERVER['SERVER_PORT'];
        if ($server_https_port != $int_https_port) {
            $host =  $_SERVER['SERVER_NAME'];
            $https_url = 'https://'.$host.$_SERVER['PHP_SELF'];
            // send HTTP header
            header("location: $https_url");
        }
    }


    /**
     * Static Method to completely destroy session and its cookies
     *
     * @param   string  $str_msg
     * @param   boolean $bool_die
     * @return  void
     */
    public static function destroySessionCookie($str_msg, $str_session_name = '', $str_cookie_path = '/', $bool_die = false)
    {
        if (!$str_session_name) { $str_session_name = session_name(); }
        // deleting session browser cookie
        #@setcookie($str_session_name, '', time()-86400, $str_cookie_path);
        #@setcookie($str_session_name, '', time()-86400, $str_cookie_path, "", FALSE, TRUE);

        @setcookie($str_session_name, '', [
            'expires' => time()-86400,
            'path' => $str_cookie_path,
            'domain' => '',
            'secure' => false,
            'httponly' => true,
            'samesite' => 'Lax',
        ]);
    

        // destroy all session
        $_SESSION = null;
        session_destroy();

        /**
         * Check request content-type
         */
        // From getallhreaders()
        $contentType = isset(getallheaders()['Content-Type']) && getallheaders()['Content-Type'] == 'application/json';
        $accept = isset(getallheaders()['Accept']) && getallheaders()['Accept'] == 'application/json';

        // from $_SERVER
        $serverContentType = isset($_SERVER['CONTENT_TYPE']) && $_SERVER['CONTENT_TYPE'] == 'application/json';

        // from $_GET
        $queryFormat = isset($_GET['format']) && $_GET['format'] == 'json';

        // From $_POST
        if (count($_POST) === 0) $_POST = json_decode(file_get_contents('php://input'), TRUE);
        $postJson = isset($_POST['format']) && $_POST['format'] == 'json';

        $isJson = $contentType || $accept || $serverContentType || $queryFormat || $postJson;

        // bring back response
        if ($isJson) die(\SLiMS\Json::stringify(['status' => false, 'message' => __('Your Login session has timed out.'), 'code' => 401])->withHeader());

        if ($bool_die === true) {
            // shutdown current script
            die($str_msg);
        } else {
            if ($str_msg) { echo $str_msg; }
        }
    }


    /**
     * Static method to clean all string character
     * from html element and attributes
     *
     * @param string $str_char
     * @return string
     */
    public static function xssFree($str_char)
    {
        return str_replace(['\'', '"'], '', strip_tags($str_char));
    }
}

================================================================================
File: simbio_UTILS\simbio_date.inc.php
================================================================================

<?php
/**
 * simbio_date class
 * A Collection of static function for doing date arithmatic related operation
 *
 * Copyright (C) 2010 Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

/**
 * Emulate date_parse function for PHP < 5.2
 */
if (!function_exists('date_parse')) {
    function date_parse($str_date) {
        $_ts = strtotime($str_date);
        $_date = getdate($_ts);
        return array('month' => $_date['mon'], 'day' => $_date['mday'], 'year' => $_date['year']);
    }
}

class simbio_date
{
    /* ALL METHODS DATE ARGUMENT(s) IS ASSUMED USING YYYY-MM-DD format */

    /**
     * Static Method to get next date
     *
     * @param   integer $int_day_num
     * @param   string  $str_start_date
     * @param   string  $str_start_format
     * @return  string
     */
    public static function getNextDate($int_day_num = 1, $str_start_date = '', $str_date_format = 'Y-m-d')
    {
        if ($int_day_num < 1) { return $str_start_date; }
        if (!$str_start_date) {
            return date($str_date_format, mktime(0, 0, 0, intval(date('n')), (intval(date('j'))+$int_day_num), intval(date('Y')) ) );
        } else if ($_parsed_date = date_parse($str_start_date)) {
			$_next_date = date($str_date_format, mktime(0, 0, 0, $_parsed_date['month'], $_parsed_date['day']+$int_day_num, $_parsed_date['year'] ) );
			return $_next_date;
        } else {
            return null;
        }
    }


    /**
     * Static Method to get previous date
     *
     * @param   integer $int_day_num
     * @param   string  $str_start_date
     * @param   string  $str_date_format
     * @return  string
     */
    public static function getPrevDate($int_day_num = 1, $str_start_date = '', $str_date_format = 'Y-m-d')
    {
        if ($int_day_num < 1) { return $str_start_date; }
        if (!$str_start_date) {
            return date($str_date_format, mktime(0, 0, 0, intval(date('n')), (intval(date('j'))-$int_day_num), intval(date('Y')) ) );
        } else if ($_parsed_date = @date_parse($str_start_date)) {
            return date($str_date_format, mktime(0, 0, 0, $_parsed_date['month'], $_parsed_date['day']-$int_day_num, $_parsed_date['year'] ) );
        } else {
            return null;
        }
    }


    /**
     * Static Method to get number of day between dates
     *
     * @param   string  $str_start_date
     * @param   string  $str_end_date
     * @return  integer
     */
    public static function calcDay($str_start_date, $str_end_date)
    {
        $_parsed_start_date = @date_parse($str_start_date);
        $_parsed_end_date = @date_parse($str_end_date);
        $_start_mktime = mktime(0, 0, 0, $_parsed_start_date['month'], $_parsed_start_date['day'], $_parsed_start_date['year']);
        $_end_mktime = mktime(0, 0, 0, $_parsed_end_date['month'], $_parsed_end_date['day'], $_parsed_end_date['year']);
        $_mksec = $_end_mktime-$_start_mktime;
        return abs(intval(round($_mksec/(3600*24))));
    }


    /**
     * Static Method to get number of holiday between dates
     *
     * @param   string  $str_start_date
     * @param   string  $str_end_date
     * @param   array   $array_holiday_name
     * @param   array   $array_holiday_date
     * @return  integer
     */
    public static function countHolidayBetween($str_start_date, $str_end_date, $array_holiday_dayname = array('Sun'), $array_holiday_date = array())
    {
        $_holiday_count = 0;
        $_one_day = 3600*24;
        $_parsed_start_date = @date_parse($str_start_date);
        $_parsed_end_date = @date_parse($str_end_date);
        $_start_mktime = mktime(0, 0, 0, $_parsed_start_date['month'], $_parsed_start_date['day'], $_parsed_start_date['year']);
        $_end_mktime = mktime(0, 0, 0, $_parsed_end_date['month'], $_parsed_end_date['day'], $_parsed_end_date['year']);
        while ($_start_mktime <= $_end_mktime) {
            if (in_array(strtolower(date('D', $_start_mktime)), $array_holiday_dayname) OR in_array(date('Y-m-d', $_start_mktime), $array_holiday_date)) {
                $_holiday_count += 1;
            }
            $_start_mktime += $_one_day;
        }

        return $_holiday_count;
    }


    /**
     * Static Method to compare dates and return the latest date
     *
     * @param   string  $str_date_to_compares
     * @return  string
     */
    public static function compareDates()
    {
        if (func_num_args() < 1) {
            return null;
        } else if (func_num_args() == 2) {
            // get value of method arguments
            $date1 = func_get_arg(0);
            $date2 = func_get_arg(1);
            // check if $date1 and $date2 is same
            if ($date1 == $date2) {
                return null;
            }
            // get the UNIX timestamp of date
            $_parsed_date1 = date_parse($date1);
            $_parsed_date2 = date_parse($date2);
            $timestamp1 = mktime(0, 0, 0, $_parsed_date1['month'], $_parsed_date1['day'], $_parsed_date1['year']);
            $timestamp2 = mktime(0, 0, 0, $_parsed_date2['month'], $_parsed_date2['day'], $_parsed_date2['year']);
            if ($timestamp1 > $timestamp2) {
                return $date1;
            } else {
                return $date2;
            }
        }

        $func_args = func_get_args();
        $latest = func_get_arg(0);
        foreach ($func_args as $args) {
            $latest = self::compareDates($latest, $args);
        }

        return $latest;
    }


    /**
     * Static Method to get next date that are not holidays
     *
     * @param   string  $str_date
     * @param   array   $array_holiday_dayname
     * @param   array   $array_holiday_date
     * @return  string
     */
    public static function getNextDateNotHoliday($str_date, $array_holiday_dayname = array(), $array_holiday_date = array())
    {

    // if array dayname and date is empty
        if (!$array_holiday_dayname AND !$array_holiday_date) {
            return $str_date;
        }

        // check date array first
        $d = false;
		$_str_date_next = $str_date;
		if ($array_holiday_date) {
            foreach ($array_holiday_date as $_idx=>$_each_date) {
                if ($str_date == $_each_date) { $d = true; }
            }
        }
		if ($d) {
			$_str_date_next = self::getNextDate(1, $_str_date_next);
		}

        // parse date
        $_parsed_date = date_parse($_str_date_next);
        // get dayname of $str_date
        $dayname = date('D', mktime(0, 0, 0, $_parsed_date['month'], $_parsed_date['day'], $_parsed_date['year']));
		$n = false;
		// check dayname
        if (in_array(strtolower($dayname), $array_holiday_dayname)) {
			$n = true;
            $_str_date_next = self::getNextDate(1, $_str_date_next);
        }

        //looping break
        if (!$d and !$n) {
            return $_str_date_next;
        } else {
            return self::getNextDateNotHoliday($_str_date_next, $array_holiday_dayname, $array_holiday_date);
        }
    }


    /**
     * Generate calendar
     *
     * @param   mixed   $mix_year: year
     * @param   mixed   $mix_month: month
     * @param   array   $arr_date_data: optional date data
     * @return  string
     */
    public static function generateCalendar($mix_year, $mix_month, $arr_date_data = array())
    {
        $_calendar = '<table cellspacing="0" class="calendar">'."\n";
        $_date = getdate(strtotime($mix_year.'-'.$mix_month.'-01'));
        $_max_week = 5;

        // start day of month
        $_start_day = $_date['wday'];
        if ($_start_day == 6) {
            $_max_week = 6;
        }
        // get the last date of month
        $_lastdate_ts = mktime(0, 0, 0, preg_replace('@^0+@i', '', $mix_month)+1, 0, (integer)$mix_year);
        $_lastdate =  date('j', $_lastdate_ts);

        $_day[0] = __('Sunday');
        $_day[1] = __('Monday');
        $_day[2] = __('Tuesday');
        $_day[3] = __('Wednesday');
        $_day[4] = __('Thursday');
        $_day[5] = __('Friday');
        $_day[6] = __('Saturday');

        // calendar table head
        $_calendar .= '<tr class="week">';
        foreach ($_day as $_wday => $_dayname) {
            $_calendar .= '<th class="dayname">'.$_dayname.'</th>';
        }
        $_calendar .= '</tr>'."\n";

        $_week_alter = 'even';
        for ($_w = 1; $_w <= $_max_week; $_w++) {
            $_week_alter = ($_w%2)?'even':'odd';
            $_calendar .= '<tr class="week">';
            foreach ($_day as $_wday => $_dayname) {
                if ($_w == 1 && $_wday == $_start_day ) {
                    $_mday = 1;
                    $_date_data = (isset($arr_date_data[$_mday]))?$arr_date_data[$_mday]:'';
                    $_calendar .= '<td class="day '.$_week_alter.'"><div class="day_number">'.$_mday.$_date_data.'</div></td>';
                } else if (isset($_mday) && $_mday < $_lastdate) {
                    $_mday++;
                    $_date_data = (isset($arr_date_data[$_mday]))?$arr_date_data[$_mday]:'';
                    $_calendar .= '<td class="day '.$_week_alter.'"><div class="day_number">'.$_mday.$_date_data.'</div></td>';
                } else {
                    $_calendar .= '<td class="day '.$_week_alter.' none"><div class="day_number">&nbsp;</div></td>';
                }
            }
            $_calendar .= '</tr>'."\n";
        }
        $_calendar .= '</table>'."\n";

        return $_calendar;
    }
}

================================================================================
File: simbio_GUI\form_maker\simbio_form_maker.inc.php
================================================================================

<?php
/**
 * simbio_form_maker
 * Class for creating form with element based on simbio form elements
 *
 * Copyright (C) 2017  Arie Nugraha (dicarve@gmail.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
  die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
  die("can not access this file directly");
}

require 'simbio_form_element.inc.php';

/**
 * A Helper class for containing anything in form
 */
class simbio_form_maker_anything extends abs_simbio_form_element
{
  public $content = '';

  public function out()
  {
    return $this->content;
  }
}


class simbio_form_maker
{
  public $submit_target = '_self';
  public $add_form_attributes = '';
  public $css_classes = 'simbio_form_maker';
  protected $elements = array();
  protected $hidden_elements = array();
  protected $form_name = '';
  protected $form_method = '';
  protected $form_action = '';
  protected $disable = '';
  protected $enable_upload = true;
  protected $enable_token = true;
  protected $submit_token = null;
  protected $submit_token_name = null;

  /**
   * Class Constructor
   *
   * @param   string  $str_form_name
   * @param   string  $str_form_action
   * @param   string  $str_form_method
   * @param   boolean $bool_enable_upload
   */
  public function __construct($str_form_name = 'mainForm', $str_form_action = '', $str_form_method = 'post', $bool_enable_upload = true)
  {
    $this->form_name = $str_form_name;
    $this->form_action = $str_form_action;
    $this->form_method = $str_form_method;
    $this->enable_upload = $bool_enable_upload;
  }

  /**
   * Static method to create random form submission token
   *
   * @param   int       $length
   * @return  string
   */
  public static function genRandomToken($length = 32){
    if(!isset($length) || intval($length) <= 8 ) {
      $length = 32;
    }
    if (function_exists('random_bytes')) {
      return bin2hex(random_bytes($length));
    }
    if (function_exists('mcrypt_create_iv')) {
      return bin2hex(mcrypt_create_iv($length, MCRYPT_DEV_URANDOM));
    }
    if (function_exists('openssl_random_pseudo_bytes')) {
      return bin2hex(openssl_random_pseudo_bytes($length));
    }
  }


  /**
   * Static method check validaty of form submission token
   *
   * @return  boolean
   */
  public static function isTokenValid(){
    if (isset($_SESSION['csrf_token']) && isset($_POST['csrf_token']) && isset($_POST['form_name'])) {
      if ($_SESSION['csrf_token'][$_POST['form_name']] === $_POST['csrf_token']) {
        // update token session
        $_SESSION['csrf_token'][$_POST['form_name']] = self::genRandomToken();
        self::updateToken($_POST['form_name'], $_SESSION['csrf_token'][$_POST['form_name']]);
        return true;
      } else {
        // remove token session var
        unset($_SESSION['csrf_token'][$_POST['form_name']]);
        return false;
      }
    }
    return false;
  }

  /**
   * Static method update token in form
   * @param $form_name
   * @param $token
   *
   * @return void
   */
  public static function updateToken($form_name, $token) {
    ?>
    <script type="application/javascript">
      parent.document.querySelector('form[name="<?php echo $form_name; ?>"] > input[name="csrf_token"]')
          .value = '<?php echo $token;?>';
    </script>
    <?php
  }


  /**
   * Method to disable form submission token
   * this method MUST BE called before startForm method call
   *
   * @return  void
   */
  public function disableSubmitToken()
  {
    $this->enable_token = false;
  }

  /**
   * Method to start form
   *
   * @return  string
   */
  public function startForm()
  {
    if ($this->disable) {
      $this->css_classes .= ' disabled';
    }
    $start_form = '<form name="'.$this->form_name.'" id="'.$this->form_name.'" class="'.$this->css_classes.'" '
      .'method="'.$this->form_method.'" '
      .'action="'.$this->form_action.'" target="'.$this->submit_target.'"'.($this->enable_upload?' enctype="multipart/form-data"':' ').$this->add_form_attributes.'>';
    if ($this->enable_token) {
      $this->submit_token = self::genRandomToken();
      $start_form .= '<input type="hidden" name="csrf_token" value="'.$this->submit_token.'" />';
      $start_form .= '<input type="hidden" name="form_name" value="'.$this->form_name.'" />';
      if (isset($_SESSION)) {
        $_SESSION['csrf_token'][$this->form_name] = $this->submit_token;
      }
    }
    return $start_form;
  }


  /**
   * Method to end form
   *
   * @return  string
   */
  public function endForm()
  {
    return '</form>';
  }


  /**
   * Method to printOut form object
   *
   */
  protected function printOut()
  {
    // please extends this method
  }


  /**
   * Method to add text field to form
   *
   * @param   string  $str_elmnt_type
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_label
   * @param   string  $str_elmnt_value
   * @param   string  $str_elmnt_attr
   * @param   string  $str_elmnt_info
   * @return  void
   */
  public function addTextField($str_elmnt_type, $str_elmnt_name, $str_elmnt_label, $str_elmnt_value = '', $str_elmnt_attr = '', $str_elmnt_info = '')
  {
    // create instance
    $_form_element = new simbio_fe_text();
    // set form element object properties
    $_form_element->element_type = $str_elmnt_type;
    $_form_element->element_name = $str_elmnt_name;
    $_form_element->element_value = $str_elmnt_value;
    $_form_element->element_attr = $str_elmnt_attr;
    $_form_element->element_helptext = $str_elmnt_info;
    $this->elements[$str_elmnt_name] = array('label' => $str_elmnt_label, 'element' => $_form_element, 'info' => $str_elmnt_info);
  }


  /**
   * Method to add select list field to form
   *
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_label
   * @param   array   $array_option
   * @param   string  $str_default_selected
   * @param   string  $str_elmnt_attr
   * @param   string  $str_elmnt_info
   * @return  void
   */
  public function addSelectList($str_elmnt_name, $str_elmnt_label, $array_option, $str_default_selected = '', $str_elmnt_attr = '', $str_elmnt_info = '')
  {
    // create instance
    $_form_element = new simbio_fe_select();
    // set form element object properties
    $_form_element->element_name = $str_elmnt_name;
    $_form_element->element_options = $array_option;
    $_form_element->element_value = $str_default_selected;
    $_form_element->element_attr = $str_elmnt_attr;
    $_form_element->element_helptext = $str_elmnt_info;
    $this->elements[$str_elmnt_name] = array('label' => $str_elmnt_label, 'element' => $_form_element, 'info' => $str_elmnt_info);
  }


  /**
   * Method to add checkbox field to form
   *
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_label
   * @param   array   $array_chbox
   * @param   mixed   $default_checked
   * @param   string  $str_elmnt_info
   * @return  void
   */
  public function addCheckBox($str_elmnt_name, $str_elmnt_label, $array_chbox, $default_checked = '', $str_elmnt_info = '')
  {
    // create instance
    $_form_element = new simbio_fe_checkbox();
    // set form element object properties
    $_form_element->element_name = $str_elmnt_name;
    $_form_element->element_options = $array_chbox;
    $_form_element->element_value = $default_checked;
    $_form_element->element_helptext = $str_elmnt_info;
    $this->elements[$str_elmnt_name] = array('label' => $str_elmnt_label, 'element' => $_form_element, 'info' => $str_elmnt_info);
  }


  /**
   * Method to add radio button field to form
   *
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_label
   * @param   array   $array_option
   * @param   mixed   $default_checked
   * @param   string  $str_elmnt_info
   * @return  void
   */
  public function addRadio($str_elmnt_name, $str_elmnt_label, $array_option, $default_checked = '', $str_elmnt_info = '')
  {
    // create instance
    $_form_element = new simbio_fe_radio();
    // set form element object properties
    $_form_element->element_name = $str_elmnt_name;
    $_form_element->element_options = $array_option;
    $_form_element->element_value = $default_checked;
    $_form_element->element_helptext = $str_elmnt_info;
    $this->elements[$str_elmnt_name] = array('label' => $str_elmnt_label, 'element' => $_form_element, 'info' => $str_elmnt_info);
  }


  /**
   * Method to add date selection field to form
   *
   * @param   string  $str_date_elmnt_name
   * @param   string  $str_month_elmnt_name
   * @param   string  $str_year_elmnt_name
   * @param   string  $str_elmnt_label
   * @param   string  $str_date
   * @param   string  $str_elmnt_info
   * @return  void
   */
  public function addDateField($str_elmnt_name, $str_elmnt_label, $str_elmnt_value = '', $str_elmnt_attr = '', $str_elmnt_info = '')
  {
    $this->addTextField('date', $str_elmnt_name, $str_elmnt_label, $str_elmnt_value, $str_elmnt_attr, $str_elmnt_info);
  }


  /**
   * Method to add hidden fields
   *
   * @param   string  $str_elmnt_name
   * @param   string  $str_elmnt_value
   * @return  void
   */
  public function addHidden($str_elmnt_name, $str_elmnt_value)
  {
    $_form_element = new simbio_fe_text();
    $_form_element->element_type = 'hidden';
    $_form_element->element_name = $str_elmnt_name;
    $_form_element->element_value = $str_elmnt_value;
    $this->hidden_elements[] = $_form_element;
  }


  /**
   * Method to add anything such as text or other HTML element to form
   *
   * @param   string  $str_elmnt_label
   * @param   string  $str_content
   * @return  void
   */
  public function addAnything($str_elmnt_label, $str_content)
  {
    $_form_element = new simbio_form_maker_anything();
    $_form_element->content = $str_content;
    $this->elements[] = array('label' => $str_elmnt_label, 'element' => $_form_element, 'info' => null);
  }


  /**
   * Method to add simbio form elements object directly
   *
   * @param   string  $str_elmnt_label
   * @param   object  $obj_simbio_fe
   * @return  void
   */
  public function addFormObject($str_elmnt_label, $obj_simbio_fe, $str_elmnt_info = '')
  {
    $this->elements[$obj_simbio_fe->element_name] = array('label' => $str_elmnt_label, 'element' => $obj_simbio_fe, 'info' => $str_elmnt_info);
  }
}

================================================================================
File: simbio_UTILS\simbio_qparser.inc.php
================================================================================

<?php
/**
 * simbio_qparser class
 * A search query parser, mapping from keyword query to SQL query
 *
 * Copyright (C) 2007,2008  Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

class simbio_qparser
{
    private $keyword_query = '';
    private $default_fields = array();
    private $field_aliases = array();
    public $string_search_fields = array();
    public $exact_match_fields = array();

    /**
     * Class constructor
     *
     * @param   string  $str_query
     * @param   array   $arr_default_fields
     */
    public function __construct($str_query, $arr_default_fields)
    {
        $this->keyword_query = trim($str_query);
        $this->default_fields = $arr_default_fields;
    }


    /**
     * Method to add boolean symbol to each word in query
     *
     * @param   string  $str_words
     * @return  string
     */
    private function addBoolean($str_words)
    {
        $_result = '';
        foreach (explode(' ', $str_words) as $word) {
            $word = trim($word);
            if (stripos('+', $word) === false) {
                $_result .= '+'.$word.' ';
            } else { $_result .= $word.' '; }
        }

        return trim($_result);
    }


    /*
     * Method to extract phrase from string
     *
     * @param   array   $arr_phrase
     * return   void
     */
    private function phraseExtract(&$arr_phrase, $str_query = '')
    {
        // get the phrase query
        $_phrase_matches = array();
        $_phrase = preg_match_all('@(".+?")@i', !empty($str_query)?$str_query:$this->keyword_query, $_phrase_matches);
        $arr_phrase = $_phrase_matches[0];
        // remove all phrase from original query
        $str_query = trim(str_replace($arr_phrase, '', $this->keyword_query));
    }


    /**
     * Method to parse the query
     *
     */
    public final function parse()
    {
        if (!$this->keyword_query) {
            return;
        }
        $_result = '';
        $_original_query = $this->keyword_query;
        // get query with field qualifier
        $_qualifier_matches = array();
        $_qualifier = preg_match_all('@([a-z0-9_.]+:[^:]+[^a-z0-9_.:])@i', $this->keyword_query.' ', $_qualifier_matches);
        $_qualifier_query = $_qualifier_matches[0];
        // remove all qualifiers query from original query
        $this->keyword_query = trim(str_replace($_qualifier_query, '', $this->keyword_query.' '));

        // parse and map keyword with field qualifier
        if ($_qualifier_query) {
            foreach ($_qualifier_query as $_each_qualifier) {
                list($_field, $_words) = explode(':', $_each_qualifier);
                $_words = trim($_words);
                // check for field alias
                $_field = trim($_field);
                if (isset($this->field_aliases[$_field])) {
                    $_field = $this->field_aliases[$_field];
                }
                // get phrases
                $_phrases = array();
                $this->phraseExtract($_phrases, $_words);
                // check for field search method
                if (in_array($_field, $this->string_search_fields)) {
                    $_tmp_result = '( ';
                    $_tmp_words = explode(' ', $_words);
                    foreach ($_tmp_words as $_word) {
                        $_tmp_result .= "`$_field` LIKE '%$_word%' AND ";
                    }
                    $_tmp_result = substr_replace($_tmp_result, '', -5);
                    $_result .= $_tmp_result.' ) AND ';
                } else if (in_array($_field, $this->exact_match_fields)) {
                    if (preg_match('@.+\|.+@i', $_words)) {
                        $_concat_words = '';
                        $_tmp_words = explode('|', $_words);
                        foreach ($_tmp_words as $_word) {
                            $_concat_words .= "'$_word',";
                        }
                        $_concat_words = substr_replace($_concat_words, '', -1);
                        $_result .= $_field.' IN ('.$_concat_words.') AND ';
                    } else if ($_words == 'NOEMPTY') {
                        $_result .= '('.$_field.'!=\'\' OR '.$_field.' IS NOT NULL) AND ';
                    } else if ($_words == 'EMPTY') {
                        $_result .= '('.$_field.'=\'\' OR '.$_field.' IS NULL) AND ';
                    } else {
                        $_result .= $_field.'=\''.$_words.'\' AND ';
                    }
                } else {
                    $_words_str = $this->addBoolean($_words);
                    $_words_str = trim($_words_str);
                    if ($_words_str == '+') {
                        $_words_str = '';
                    }
                    $_phrases_str = '';
                    foreach ($_phrases as $_phrase) {
                        $_phrases_str .= $_phrase.' ';
                    }
                    $_phrases_str = trim($_phrases_str)?' '.$_phrases_str:'';
                    $_result .= "(MATCH(`$_field`) AGAINST ('$_words_str"."$_phrases_str' IN BOOLEAN MODE)) AND ";
                }
            }
            // remove the last AND
            $_result = substr_replace($_result, '', -5);
        }

        // check for the rest of query
        $_rest_result = '';
        $_rest_result_phrase = '';
        if ($this->keyword_query) {
            // phrase extract
            $_phrases2 = array();
            $this->phraseExtract($_phrases2);
            if ($_phrases2) {
                foreach ($this->default_fields as $_field) {
                    foreach ($_phrases2 as $_phrase) {
                        $_phrase = str_replace('"', '', $_phrase);
                        $_rest_result_phrase .= " `$_field` LIKE '%$_phrase%' OR ";
                    }
                }
                // remove the last AND
                $_rest_result_phrase = substr_replace($_rest_result_phrase, '', -4);
            }

            if ($this->keyword_query) {
                // explode string by space
                $_words = explode(' ', $this->keyword_query);
                foreach ($this->default_fields as $_field) {
                    $_rest_result .= "( ";
                    foreach ($_words as $_word) {
                        $_rest_result .= "`$_field` LIKE '%$_word%' AND ";
                    }
                    $_rest_result = substr_replace($_rest_result, '', -5);
                    $_rest_result .= " ) OR ";
                }
                // remove the last OR
                $_rest_result = substr_replace($_rest_result, '', -4);
            }
        }

        if ($_rest_result_phrase) {
            $_result .= ' AND ('.$_rest_result_phrase.')';
        }
        if ($_rest_result) {
            $_result .= ' AND ('.$_rest_result.')';
        }
        $_result = preg_replace('@^\s*OR\s|^\s*AND\s@i', '', $_result);
        return $_result;
    }


    /**
     * Method to set field aliasing
     *
     * @param   array   $arr_field_aliases
     * @return  void
     */
    public function setFieldAliases($arr_field_aliases)
    {
        $this->field_aliases = $arr_field_aliases;
    }


    /**
     * Method to set which field is searched by string method
     *
     * @param   array   $arr_fields
     * @return  void
     */
    public function setSearchStringFields($arr_fields)
    {
        $this->string_search_fields = $arr_fields;
    }


    /**
     * Method to set which field is searched with exact match
     *
     * @param   array   $arr_fields
     * @return  void
     */
    public function setExactMatchFields($arr_fields)
    {
        $this->exact_match_fields = $arr_fields;
    }
}

================================================================================
File: simbio_UTILS\simbio_tokenizecql.inc.php
================================================================================

<?php
/**
 *
 * CQL Tokenizer
 *
 * Copyright (C) 2009 Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
  die("can not access this file directly");
} elseif (INDEX_AUTH != 1) { 
  die("can not access this file directly");
}

/**
 * CQL Tokenizer
 * Tokenize CQL string to array for easy proccessing
 *
 * @param   string  $str_query
 * @param   array   $arr_stop_words
 * @return  array
 **/
function simbio_tokenizeCQL($str_query, $arr_searcheable_fields, $arr_stop_words = array(), $int_max_words = 20)
{
  // buffer vars
  $_array_queries = array();
  $_new_q = '';
  $_last_boolean = '+';
  $_previous_field = 'title';
  $_current_field = 'title';
  $_phrase = '';
  // make sure there is no spaces between equation mark
  $str_query = preg_replace('@\s+=\s+@i', '=', $str_query);
  // inside quote flag
  $_inside_quote = false;
  // tokenizing string one by one
  // $_token = strtok(strtolower($str_query), " \n\t");
  $_token = strtok($str_query, " \n\t");
  // word counter
  $_word_count = 0;
  while ($_token !== false) {
    // SAFEGUARD!
    if ($_word_count > $int_max_words) {
      break;
    }
    $_token = trim($_token);
    // check for stopwords
    if (in_array($_token, $arr_stop_words) AND !$_inside_quote) {
      // do nothing
      $_token = strtok(" \n\t");
      continue;
    }
    // check boolean mode
    // if (in_array($_token, array('exact', 'and', 'or', 'not'))) {
    if (preg_match('@\b(exact|and|or|not)\b@i', $_token)) {
      $_bool = strtolower($_token);
      if ($_bool == 'exact' AND !$_inside_quote) {
        $_last_boolean = '++';
      } else if ($_bool == 'or' AND !$_inside_quote) {
        $_last_boolean = '*';
      } else if ($_bool == 'not' AND !$_inside_quote) {
        $_last_boolean = '-';
      } else {
        $_last_boolean = '+';
      }
      // we continue to the next loop
      $_token = strtok(" \n\t");
      continue;
    }
    // check for current field
    foreach ($arr_searcheable_fields as $_search_field) {
      if ((strpos($_token, $_search_field.'=') === 0) AND !$_inside_quote) {
        $_current_field = $_search_field;
        $_token = str_replace($_search_field.'=', '', $_token);
        if ($_word_count > 0) {
          $_array_queries[] = array('f' => 'boolean', 'b' => $_last_boolean);
        }
        $_last_boolean = '+';
      }
    }
    // check if we are inside quotes
    if (strpos($_token, '"') === 0) {
      $_inside_quote = true;
      // remove the first quote
      $_token = substr_replace($_token, '', 0, 1);
    }
    if ($_inside_quote) {
      if (strpos($_token, '"') === strlen($_token)-1) {
        $_inside_quote = false;
        $_phrase .= str_replace('"', '', $_token);
        $_array_queries[] = array('f' => $_current_field, 'b' => $_last_boolean, 'q' => $_phrase, 'is_phrase' => 1);
        // reset
        $_phrase = '';
      } else {
        $_phrase .= str_replace('"', '', $_token).' ';
        // we continue to the next loop and concatenating words
        $_token = strtok(" \n\t");
        continue;
      }
    } else {
      if (stripos($_token, '(') === true) {
        $_array_queries[] = array('f' => 'opengroup', 'b' => $_last_boolean);
      } else if (stripos($_token, ')') === true) {
        $_array_queries[] = array('f' => 'closegroup', 'b' => $_last_boolean);
      } else {
        $_array_queries[] = array('f' => $_current_field, 'b' => $_last_boolean, 'q' => $_token); 
      }
    }
    // set previous field flag
    $_previous_field = $_current_field;
    // re-toke
    $_token = strtok(" \n\t");
    // add word counter
    $_word_count++;
  }
  $_array_queries[] = array('f' => 'cql_end');
  return $_array_queries;
}

================================================================================
File: simbio_UTILS\simbio_tokenizecql.v2.inc.php
================================================================================

<?php
/**
 *
 * CQL Tokenizer
 *
 * Copyright (C) 2009 Arie Nugraha (dicarve@yahoo.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

// be sure that this file not accessed directly
if (!defined('INDEX_AUTH')) {
    die("can not access this file directly");
} elseif (INDEX_AUTH != 1) {
    die("can not access this file directly");
}

/**
 * CQL Tokenizer
 * Tokenize CQL string to array for easy proccessing
 *
 * @param   string  $str_query
 * @param   array   $arr_stop_words
 * @return  string
 **/
function simbio_tokenizeCQL($str_query, $arr_searcheable_fields, $arr_stop_words = array(), $int_max_words = 20)
{
    // buffer vars
    $_array_queries = array();
    $_new_q = '';
    $_last_boolean = '+';
    $_previous_field = 'title';
    $_current_field = 'title';
    $_phrase = '';
    $_q_buff = '';
    // add dummy field
    $arr_searcheable_fields[] = 'xxxxx';
    // make sure there is no spaces between equation mark
    $str_query = preg_replace('@\s+=\s+@i', '=', $str_query);
    // add dummy field add the end of query
    $str_query .= ' xxxxx=xxxxx';
    // inside quote flag
    $_inside_quote = false;
    // tokenizing string one by one
    $_token = strtok(strtolower($str_query), " \n\t");
    // word counter
    $_word_count = 0;
    while ($_token !== false) {
        // SAFEGUARD!
        if ($_word_count > $int_max_words) {
            break;
        }
        $_token = trim($_token);
        // check for stopwords
        if (in_array($_token, $arr_stop_words) AND !$_inside_quote) {
            // do nothing
            $_token = strtok(" \n\t");
            continue;
        }
        // check boolean mode
        if (in_array($_token, array('exact', 'and', 'or', 'not'))) {
            if ($_token == 'exact' AND !$_inside_quote) {
                $_last_boolean = '++';
            } else if ($_token == 'or' AND !$_inside_quote) {
                $_last_boolean = '*';
            } else if ($_token == 'not' AND !$_inside_quote) {
                $_last_boolean = '-';
            } else {
                $_last_boolean = '+';
            }
            // we continue to the next loop
            $_token = strtok(" \n\t");
            continue;
        }
        // check for current field
        foreach ($arr_searcheable_fields as $_search_field) {
            if ((strpos($_token, $_search_field.'=') === 0) AND !$_inside_quote) {
                $_current_field = $_search_field;
                $_token = str_replace($_search_field.'=', '', $_token);
                if ($_word_count > 0) {
                    $_array_queries[] = array('f' => 'boolean', 'b' => $_last_boolean);
                }
                $_last_boolean = '+';
            }
        }
        // check if we are inside quotes
        if (strpos($_token, '"') === 0) {
            $_inside_quote = true;
            // remove the first quote
            $_token = substr_replace($_token, '', 0, 1);
        }
        if ($_inside_quote) {
            if (strpos($_token, '"') === strlen($_token)-1) {
                $_inside_quote = false;
                $_phrase .= str_replace('"', '', $_token);
                $_q_buff .= "\"$_phrase\" ";
                // reset
                $_phrase = '';
            } else {
                $_phrase .= str_replace('"', '', $_token).' ';
                // we continue to the next loop and concatenating words
                $_token = strtok(" \n\t");
                continue;
            }
        } else {
            if ($_current_field == $_previous_field) {
                $_q_buff .= "$_token ";
            } else if (($_current_field != $_previous_field) && !empty($_q_buff)) {
                $_array_queries[] = array('f' => $_previous_field, 'b' => $_last_boolean, 'q' => trim($_q_buff));
                $_q_buff = "$_token ";
            } else {
                $_array_queries[] = array('f' => $_current_field, 'b' => $_last_boolean, 'q' => trim($_token));
                $_q_buff = '';
            }
        }
        // set previous field flag
        $_previous_field = $_current_field;
        // re-toke
        $_token = strtok(" \n\t");
        // add word counter
        $_word_count++;
    }
    $_array_queries[] = array('f' => 'cql_end');
    return $_array_queries;
}

================================================================================
Total files processed: 25

